#suppress the warnings and other messages from showing in the knitted file.
knitr::opts_chunk$set(
fig.width  = 8,
fig.height = 5,
echo       = TRUE,
warning    = FALSE,
message    = FALSE,
cache      = TRUE
)
#install.packages("epiDisplay") # for frequency tables; uncomment if not previously installed
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(haven) # for loading .sav datasets (or other SPSS datasets)
library(dplyr) # great for summary statistics, offers all necessary functions for measures of central tendency
library(lubridate)
library(epiDisplay)
# Please adjust the path accordingly. This means you should create a separate folder for this second course and script within your (hopefully) already existing R directory. Copy that path here!
setwd("/Users/anamariaplesca/Desktop/Stats planning/Script 2")
chickflick_outliers <- read_sav("ChickFlick_outliers.sav")
chickflick_simplified <- read_sav("ChickFlick_simple.sav")
# Reading in data you are already familiar with. This data is in comma separated value format. We'll use the read_csv() function
data <- read_csv("Data with which to play.csv")
# Using the `$` operator to indicate that we need the column `Income` from our dataframe `data`. Once you type the dollar operator a list of suggestion will pop-up. Use this opportunity. If you click away press on the TAB key.
mean_income <- mean(data$Income)
# If you were to apply the function as follows...
# mean(Income)
# ... R would have thrown an error. That is because you have to indicate where the column comes from.
# Finding out the median income in our data
median_income <- median(data$Income)
mean_income < median_income #FALSE - boolean value representing NO
# Saving the years of birth in a variable
years_of_birth <- data$DOB
# Looking at the range of values. In R, the function `range()` delivers the minimum and the maximum observed values
range(years_of_birth)
typeof(years_of_birth)
# Filtering
old <- data %>% # Take the `data` dataset AND
filter(years_of_birth <= 1970) # filter the dataset such that it includes only the people born before and including 1970
# Take a look at the result
old
# Don't worry, you are not expected to understand all of this now. Just keep in mind that it is a function
# that computes the mode for you
find_mode <- function(x) {
u <- unique(x) # finds unique instances of each Income value
tab <- tabulate(match(x, u)) # computes frequencies for each unique value in the actual column
u[tab == max(tab)] # indexing the vector with unique instances of each Income value depending on their frequency
}
mode_income <- find_mode(data$Income)
mode_income # we have two modes, i.e., two most frequent values
hist(data$Income) # two peaks
# Run both lines of code together to create a scatterplot and to add a line representing the mean as a model
plot(chickflick_outliers$arousal)
abline(h = mean(chickflick_outliers$arousal), col="red")
# All categorical variables need to be converted to factors before attempting to plotting the data. Skipping this step leads to odd-looking plots. We are using the pipe operator `%>%` and the mutate() function to modify the gender column in our data.
# We are basically intructing are as such:
# 1. Take the dataset chickflick_outliers
# 2. Mutate/Add:
#   2a. a column named gender, where the already existing column gender is transformed from the character to the factor type
#   2b. a column named film, where the already existing column film is transformed from the character to the factor type
chickflick_outliers <- chickflick_outliers %>%
mutate(gender = as.factor(gender),
film = as.factor(film))
ggplot(data = chickflick_outliers, aes(x = film, y = arousal, fill = gender))+
geom_boxplot() +
stat_boxplot(geom = "errorbar")+
labs(x = "Film", y = "Average physiological arousal", fill = "Gender",
title = "Average physhiological arousal as a function of gender and watched film")+
scale_fill_brewer(palette = "Pastel1")
outliers <- boxplot.stats(chickflick_outliers$arousal)$out
outliers
outliers_index <- which((chickflick_outliers$arousal %in% outliers))
# What which() does:
# Which compares the values in the entire arousal column with the values stored in our `outliers` vector.
# Then it delivers the indices for which the comparison yields a TRUE answer.
outliers_index
# Saving the mean and the standard deviation in variables
mean_chickflick <- mean(chickflick_outliers$arousal)
sd_chickflick <-  sd(chickflick_outliers$arousal)
chickflick_outliers <- chickflick_outliers %>%
mutate(z_scores = ((chickflick_outliers$arousal - mean_chickflick)/sd_chickflick))
# new values are computed for each value in the arousal column
chickflick_outliers
# Let's recode the z-scores
chickflick_outliers <- chickflick_outliers %>%
mutate(z_scores = case_when(
z_scores > 3.29 ~ 4,
z_scores > 2.58 ~ 3,
z_scores > 1.96 ~ 2,
z_scores < 2 ~ 1
))
# Check the result
chickflick_outliers
# Using the pipe operator and the filter() function to find the extreme values
extreme_values <- chickflick_outliers %>%
filter(z_scores > 2)
# Check the results
extreme_values
table(chickflick_outliers$z_scores)
tab1(chickflick_outliers$z_scores)
# Let's exclude all z-scores equal to or larger than 3.
chickflick_no_outliers <- chickflick_outliers %>%
filter(!z_scores >= 3)
# Check the result
chickflick_no_outliers
chickflick_simplified
female_chickflick_subset <- chickflick_simplified %>%
group_by(gender) %>%
filter(gender == 2)
female_chickflick_summary <- psych::describe(female_chickflick_subset$arousal)
female_chickflick_summary
hist(female_chickflick_subset$arousal)
# Select and run both lines together
qqnorm(female_chickflick_subset$arousal)
qqline(female_chickflick_subset$arousal)
shapiro.test(female_chickflick_subset$arousal)
nortest::lillie.test(female_chickflick_subset$arousal)
chickflick_simplified$gender <- as.factor(chickflick_simplified$gender)
chickflick_simplified <- chickflick_simplified %>%
mutate(gender = recode(gender,
"1" = "Male",
"2" = "Female"))
car::leveneTest(arousal ~ gender, data = chickflick_simplified)
# Add a logArousal column by appling the natural logarithm function on the arousal column
chickflick_simplified <- chickflick_simplified %>%
mutate(logArousal = log(arousal))
# Check the result
chickflick_simplified
#suppress the warnings and other messages from showing in the knitted file.
knitr::opts_chunk$set(
fig.width  = 8,
fig.height = 5,
echo       = TRUE,
warning    = FALSE,
message    = FALSE,
cache      = TRUE
)
#install.packages("epiDisplay") # for frequency tables; uncomment if not previously installed
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(haven) # for loading .sav datasets (or other SPSS datasets)
library(dplyr) # great for summary statistics, offers all necessary functions for measures of central tendency
library(lubridate)
library(epiDisplay)
# Please adjust the path accordingly. This means you should create a separate folder for this second course and script within your (hopefully) already existing R directory. Copy that path here!
setwd("/Users/anamariaplesca/Desktop/Stats planning/Script 2")
chickflick_outliers <- read_sav("ChickFlick_outliers.sav")
chickflick_simplified <- read_sav("ChickFlick_simple.sav")
# Reading in data you are already familiar with. This data is in comma separated value format. We'll use the read_csv() function
data <- read_csv("Data with which to play.csv")
# Using the `$` operator to indicate that we need the column `Income` from our dataframe `data`. Once you type the dollar operator a list of suggestion will pop-up. Use this opportunity. If you click away press on the TAB key.
mean_income <- mean(data$Income)
# If you were to apply the function as follows...
# mean(Income)
# ... R would have thrown an error. That is because you have to indicate where the column comes from.
# Finding out the median income in our data
median_income <- median(data$Income)
mean_income < median_income #FALSE - boolean value representing NO
# Saving the years of birth in a variable
years_of_birth <- data$DOB
# Looking at the range of values. In R, the function `range()` delivers the minimum and the maximum observed values
range(years_of_birth)
typeof(years_of_birth)
# Filtering
old <- data %>% # Take the `data` dataset AND
filter(years_of_birth <= 1970) # filter the dataset such that it includes only the people born before and including 1970
# Take a look at the result
old
# Don't worry, you are not expected to understand all of this now. Just keep in mind that it is a function
# that computes the mode for you
find_mode <- function(x) {
u <- unique(x) # finds unique instances of each Income value
tab <- tabulate(match(x, u)) # computes frequencies for each unique value in the actual column
u[tab == max(tab)] # indexing the vector with unique instances of each Income value depending on their frequency
}
mode_income <- find_mode(data$Income)
mode_income # we have two modes, i.e., two most frequent values
hist(data$Income) # two peaks
# Run both lines of code together to create a scatterplot and to add a line representing the mean as a model
plot(chickflick_outliers$arousal)
abline(h = mean(chickflick_outliers$arousal), col="red")
# All categorical variables need to be converted to factors before attempting to plotting the data. Skipping this step leads to odd-looking plots. We are using the pipe operator `%>%` and the mutate() function to modify the gender column in our data.
# We are basically intructing are as such:
# 1. Take the dataset chickflick_outliers
# 2. Mutate/Add:
#   2a. a column named gender, where the already existing column gender is transformed from the character to the factor type
#   2b. a column named film, where the already existing column film is transformed from the character to the factor type
chickflick_outliers <- chickflick_outliers %>%
mutate(gender = as.factor(gender),
film = as.factor(film))
ggplot(data = chickflick_outliers, aes(x = film, y = arousal, fill = gender))+
geom_boxplot() +
stat_boxplot(geom = "errorbar")+
labs(x = "Film", y = "Average physiological arousal", fill = "Gender",
title = "Average physhiological arousal as a function of gender and watched film")+
scale_fill_brewer(palette = "Pastel1")
outliers <- boxplot.stats(chickflick_outliers$arousal)$out
outliers
outliers_index <- which((chickflick_outliers$arousal %in% outliers))
# What which() does:
# Which compares the values in the entire arousal column with the values stored in our `outliers` vector.
# Then it delivers the indices for which the comparison yields a TRUE answer.
outliers_index
# Saving the mean and the standard deviation in variables
mean_chickflick <- mean(chickflick_outliers$arousal)
sd_chickflick <-  sd(chickflick_outliers$arousal)
chickflick_outliers <- chickflick_outliers %>%
mutate(z_scores = ((chickflick_outliers$arousal - mean_chickflick)/sd_chickflick))
# new values are computed for each value in the arousal column
chickflick_outliers
# Let's recode the z-scores
chickflick_outliers <- chickflick_outliers %>%
mutate(z_scores = case_when(
z_scores > 3.29 ~ 4,
z_scores > 2.58 ~ 3,
z_scores > 1.96 ~ 2,
z_scores < 2 ~ 1
))
# Check the result
chickflick_outliers
# Using the pipe operator and the filter() function to find the extreme values
extreme_values <- chickflick_outliers %>%
filter(z_scores > 2)
# Check the results
extreme_values
table(chickflick_outliers$z_scores)
tab1(chickflick_outliers$z_scores)
# Let's exclude all z-scores equal to or larger than 3.
chickflick_no_outliers <- chickflick_outliers %>%
filter(!z_scores >= 3)
# Check the result
chickflick_no_outliers
chickflick_simplified
female_chickflick_subset <- chickflick_simplified %>%
group_by(gender) %>%
filter(gender == 2)
female_chickflick_summary <- psych::describe(female_chickflick_subset$arousal)
female_chickflick_summary
hist(female_chickflick_subset$arousal)
# Select and run both lines together
qqnorm(female_chickflick_subset$arousal)
qqline(female_chickflick_subset$arousal)
shapiro.test(female_chickflick_subset$arousal)
nortest::lillie.test(female_chickflick_subset$arousal)
chickflick_simplified$gender <- as.factor(chickflick_simplified$gender)
chickflick_simplified <- chickflick_simplified %>%
mutate(gender = recode(gender,
"1" = "Male",
"2" = "Female"))
car::leveneTest(arousal ~ gender, data = chickflick_simplified)
# Add a logArousal column by appling the natural logarithm function on the arousal column
chickflick_simplified <- chickflick_simplified %>%
mutate(logArousal = log(arousal))
# Check the result
chickflick_simplified
