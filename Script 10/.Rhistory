levels(bushtuckerLong$Animal)
#fish_eye kangaroo_testicle stick_insect witchetty_grub
bushModel<-ezANOVA(data = bushtuckerLong, dv = .(TimeToRetch), wid = .(participant),  within = .(Animal), type = 3, detailed = TRUE, return_aov = TRUE)
bushModel
emmeans(bushModel$aov, ~Animal)
# Checking the levels and their order
levels(bushtuckerLong$Animal)
#re-order factor levels for Animal
bushtuckerLong$Animal <- factor(bushtuckerLong$Animal, levels=c('stick_insect', 'kangaroo_testicle', 'fish_eye', 'witchetty_grub'))
#re-order factor levels for Animal
bushtuckerLong$Animal <- factor(bushtuckerLong$Animal, levels=c('stick_insect', 'kangaroo_testicle', 'fish_eye', 'witchetty_grub'))
#check the result
levels(bushtuckerLong$Animal)
emmeans(bushModel$aov, ~Animal)
em_con<- emmeans(bushModel$aov, ~Animal)
emmeans::contrast(em_con, method=list("PartsVSWhole" = c(1,-1, -1, 1),
"TesticlevsEye"= c(0, -1, 1, 0),
"StickvsGrub" = c(-1, 0, 0, 1)))
bushtuckerLong$Animal
emmeans::contrast(em_con, method=list("PartsVSWhole" = c(1,-1, -1, 1),
"TesticlevsEye"= c(0, -1, 1, 0),
"StickvsGrub" =  c(-1, 0, 0, 1)))
em_con
emmeans::contrast(em_con, method=list("PartsVSWhole" = c(-1,-1, 1, 1),
"TesticlevsEye"= c(-1, 1, 0, 0),
"StickvsGrub" =  c(0, 0, 1, -1)))
PartsVSWhole = c(1,-1, -1, 1)
TesticlevsEye= c(0, -1, 1, 0)
StickvsGrub =  c(-1, 0, 0, 1)
em_con<- emmeans(bushModel$aov, ~Animal)
em_con<- emmeans(bushModel$aov, ~Animal)
em_con<- emmeans(bushModel$aov, ~Animal)
em_con<- emmeans(bushModel$aov, ~Animal)
unlink("Script_Week10_cache", recursive = TRUE)
em_con
unlink("Script_Week10_cache", recursive = TRUE)
#suppress the warnings and other messages from showing in the knitted file.
knitr::opts_chunk$set(
fig.width  = 8,
fig.height = 5,
echo       = TRUE,
warning    = FALSE,
message    = FALSE,
cache      = TRUE
)
# This function checks if you have already installed the ez package. If yes, it is called to the library. If not, it is installed.
if (!requireNamespace("ez")) {
stop( install.packages("ez"))
} else {
library("ez")
}
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(ez)
library(emmeans)
options(scipen = 999) # removes scientific notation
# Please adjust the path accordingly
setwd("~/Desktop/Stats planning/Script 10/")
bushtuckerDat <- read.delim("Bushtucker.dat", header = T)
str(bushtuckerDat)
participantRetch <- bushtuckerDat %>%
group_by(participant) %>%
dplyr::summarize(Mean = mean(c(stick_insect, kangaroo_testicle, fish_eye, witchetty_grub)),
Var = var(c(stick_insect, kangaroo_testicle, fish_eye, witchetty_grub)))
# Step 1: Convert the data to long format
bushtuckerLong <- pivot_longer(bushtuckerDat, cols = 2:5, names_to = "Animal", values_to = "TimeToRetch")
bushtuckerLong$Animal <- as.factor(bushtuckerLong$Animal)
# Step 2: Compute average values to retch by the animal that was eaten
averagesByAnimal <- bushtuckerLong %>%
group_by(Animal) %>%
dplyr::summarise(mean = mean(TimeToRetch))
summary_participantRetch <- summarySEwithin(data = bushtuckerLong, measurevar = "TimeToRetch", withinvars = "participant")
ggplot(data = summary_participantRetch, aes(x = participant, y = TimeToRetch, fill = participant))+
geom_bar(position = "dodge", stat = "summary", fun = "mean")+
geom_errorbar(aes(ymin=TimeToRetch-ci, ymax=TimeToRetch+ci),
width=.2,
position=position_dodge(.9))+
labs(x = "Participant", y = "Average time to retch (seconds)", fill = "participant",
title = "Average time to retch by participant")+
scale_fill_brewer(palette = "Pastel1")
?ezANOVA()
bushModel<-ezANOVA(data = bushtuckerLong, dv = .(TimeToRetch), wid = .(participant),  within = .(Animal), type = 3, detailed = TRUE, return_aov = TRUE)
bushModel
PartsVSWhole = c(1,-1, -1, 1)
TesticlevsEye= c(0, -1, 1, 0)
StickvsGrub =  c(-1, 0, 0, 1)
em_con<- emmeans(bushModel$aov, ~Animal)
em_con<- emmeans(bushModel$aov, ~Animal)
em_con<- emmeans(bushModel$aov, ~Animal)
PartsVSWhole = c(1,-1, -1, 1)
TesticlevsEye= c(0, -1, 1, 0)
StickvsGrub =  c(-1, 0, 0, 1)
# This function checks if you have already installed the ez package. If yes, it is called to the library. If not, it is installed.
if (!requireNamespace("ez")) {
stop( install.packages("ez"))
} else {
library("ez")
}
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(ez)
library(emmeans)
options(scipen = 999) # removes scientific notation
ggplot(data = bushtuckerLong, aes(x = Animal, y = TimeToRetch, fill = Animal))+
geom_boxplot() +
stat_boxplot(geom = "errorbar")+
labs(x = "Type of Animal Eaten", y = "Mean Time to Retch (Seconds)", fill = "Type of Animal Eaten")+
scale_fill_brewer(palette = "Pastel1")
bushModel<-ezANOVA(data = bushtuckerLong, dv = .(TimeToRetch), wid = .(participant),  within = .(Animal), type = 3, detailed = TRUE, return_aov = TRUE)
PartsVSWhole = c(1,-1, -1, 1)
TesticlevsEye =  c(0, -1, 1, 0)
StickvsGrub =  c(-1, 0, 0, 1)
em_con<- emmeans(bushModel$aov, ~Animal)
em_con<- emmeans(bushModel$ANOVA, ~Animal)
em_con<- emmeans(bushModel$aov, ~Animal)
bushModel<-ezANOVA(data = bushtuckerLong, dv = .(TimeToRetch), wid = .(participant),  within = .(Animal), type = 3, detailed = TRUE, return_aov = TRUE)
#suppress the warnings and other messages from showing in the knitted file.
knitr::opts_chunk$set(
fig.width  = 8,
fig.height = 5,
echo       = TRUE,
warning    = FALSE,
message    = FALSE,
cache      = TRUE
)
# This function checks if you have already installed the ez package. If yes, it is called to the library. If not, it is installed.
if (!requireNamespace("ez")) {
stop( install.packages("ez"))
} else {
library("ez")
}
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(ez)
library(emmeans)
options(scipen = 999) # removes scientific notation
# Please adjust the path accordingly
setwd("~/Desktop/Stats planning/Script 10/")
bushtuckerDat <- read.delim("Bushtucker.dat", header = T)
str(bushtuckerDat)
participantRetch <- bushtuckerDat %>%
group_by(participant) %>%
dplyr::summarize(Mean = mean(c(stick_insect, kangaroo_testicle, fish_eye, witchetty_grub)),
Var = var(c(stick_insect, kangaroo_testicle, fish_eye, witchetty_grub)))
# Step 1: Convert the data to long format
bushtuckerLong <- pivot_longer(bushtuckerDat, cols = 2:5, names_to = "Animal", values_to = "TimeToRetch")
bushtuckerLong$Animal <- as.factor(bushtuckerLong$Animal)
# Step 2: Compute average values to retch by the animal that was eaten
averagesByAnimal <- bushtuckerLong %>%
group_by(Animal) %>%
dplyr::summarise(mean = mean(TimeToRetch))
# Step 2: Compute average values to retch by the animal that was eaten
averagesByAnimal <- bushtuckerLong %>%
group_by(Animal) %>%
dplyr::summarise(mean = mean(TimeToRetch))
summary_participantRetch <- summarySEwithin(data = bushtuckerLong, measurevar = "TimeToRetch", withinvars = "participant")
ggplot(data = summary_participantRetch, aes(x = participant, y = TimeToRetch, fill = participant))+
geom_bar(position = "dodge", stat = "summary", fun = "mean")+
geom_errorbar(aes(ymin=TimeToRetch-ci, ymax=TimeToRetch+ci),
width=.2,
position=position_dodge(.9))+
labs(x = "Participant", y = "Average time to retch (seconds)", fill = "participant",
title = "Average time to retch by participant")+
scale_fill_brewer(palette = "Pastel1")
ggplot(data = bushtuckerLong, aes(x = Animal, y = TimeToRetch, fill = Animal))+
geom_boxplot() +
stat_boxplot(geom = "errorbar")+
labs(x = "Type of Animal Eaten", y = "Mean Time to Retch (Seconds)", fill = "Type of Animal Eaten")+
scale_fill_brewer(palette = "Pastel1")
?ezANOVA()
bushModel<-ezANOVA(data = bushtuckerLong, dv = .(TimeToRetch), wid = .(participant),  within = .(Animal), type = 3, detailed = TRUE, return_aov = TRUE)
bushModel
PartsVSWhole = c(1,-1, -1, 1)
TesticlevsEye =  c(0, -1, 1, 0)
StickvsGrub =  c(-1, 0, 0, 1)
em_con<- emmeans(bushModel$aov, ~Animal)
em_con<- emmeans(bushModel$aov, TimeToRetch~Animal)
em_con<- emmeans(bushModel$aov, ~Animal)
library(emmeans)
em_con<- emmeans(bushModel$aov, ~Animal)
emmeans(bushModel$aov, ~Animal)
# This function checks if you have already installed the ez package. If yes, it is called to the library. If not, it is installed.
if (!requireNamespace("ez")) {
stop( install.packages("ez"))
} else {
library("ez")
}
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(ez)
library(emmeans)
options(scipen = 999) # removes scientific notation
# Please adjust the path accordingly
setwd("~/Desktop/Stats planning/Script 10/")
bushtuckerDat <- read.delim("Bushtucker.dat", header = T)
str(bushtuckerDat)
participantRetch <- bushtuckerDat %>%
group_by(participant) %>%
dplyr::summarize(Mean = mean(c(stick_insect, kangaroo_testicle, fish_eye, witchetty_grub)),
Var = var(c(stick_insect, kangaroo_testicle, fish_eye, witchetty_grub)))
# Step 1: Convert the data to long format
bushtuckerLong <- pivot_longer(bushtuckerDat, cols = 2:5, names_to = "Animal", values_to = "TimeToRetch")
bushtuckerLong$Animal <- as.factor(bushtuckerLong$Animal)
# Step 2: Compute average values to retch by the animal that was eaten
averagesByAnimal <- bushtuckerLong %>%
group_by(Animal) %>%
dplyr::summarise(mean = mean(TimeToRetch))
summary_participantRetch <- summarySEwithin(data = bushtuckerLong, measurevar = "TimeToRetch", withinvars = "participant")
ggplot(data = summary_participantRetch, aes(x = participant, y = TimeToRetch, fill = participant))+
geom_bar(position = "dodge", stat = "summary", fun = "mean")+
geom_errorbar(aes(ymin=TimeToRetch-ci, ymax=TimeToRetch+ci),
width=.2,
position=position_dodge(.9))+
labs(x = "Participant", y = "Average time to retch (seconds)", fill = "participant",
title = "Average time to retch by participant")+
scale_fill_brewer(palette = "Pastel1")
```{r}
ggplot(data = bushtuckerLong, aes(x = Animal, y = TimeToRetch, fill = Animal))+
geom_boxplot() +
stat_boxplot(geom = "errorbar")+
labs(x = "Type of Animal Eaten", y = "Mean Time to Retch (Seconds)", fill = "Type of Animal Eaten")+
scale_fill_brewer(palette = "Pastel1")
?ezANOVA()
bushModel<-ezANOVA(data = bushtuckerLong, dv = .(TimeToRetch), wid = .(participant),  within = .(Animal), type = 3, detailed = TRUE, return_aov = TRUE)
bushModel
bushModel
em_con<- emmeans(bushModel$aov, ~Animal)
levels(bushtuckerLong$Animal)
bushtuckerLong$Animal <- factor(bushtuckerLong$Animal, levels=c("stick_insect", "kangaroo_testicle", "fish_eye", "witchetty_grub"))
levels(bushtuckerLong$Animal)
pairwise.t.test(bushtuckerLong$TimeToRetch, bushtuckerLong$Animal, paired = TRUE, p.adjust.method = "bonferroni")
posthoc_test <- pairwise.t.test(bushtuckerLong$TimeToRetch, bushtuckerLong$Animal, paired = TRUE, p.adjust.method = "bonferroni")
summary(posthoc_test)
posthoc_test
pairwise.t.test(bushtuckerLong$TimeToRetch, bushtuckerLong$Animal, paired = TRUE, p.adjust.method = "bonferroni")
ggboxplot(bushtuckerLong, x = "animal", y = "time to retch", add = "point") +
stat_pvalue_manual(posthoc_test)
posthoc_test %>% add_xy_position(x = "animal") +
ggboxplot(bushtuckerLong, x = "animal", y = "time to retch", add = "point") +
stat_pvalue_manual(posthoc_test)
library(ggpubr)
library(emmeans)
library(ggpubr)
# This function checks if you have already installed the ez package. If yes, it is called to the library. If not, it is installed.
if (!requireNamespace(c("ez", "ggpubr"))) {
stop( install.packages(c("ez", "ggpubr")))
} else {
library("ez")
}
if (!requireNamespace(c("ez", "ggpubr"))) {
stop( install.packages(c("ez", "ggpubr")))
} else {
library("ez")
}
if (!requireNamespace("ez")) {
stop( install.packages("ez"))
} else {
library("ez")
}
requireNamespace(c("tidyverse", "ggpubr"))
requireNamespace("ez")
if (!requireNamespace("ez")) {
stop(install.packages("ez", "ggpubr"))
} else {
library("ez")
}
install.packages("ggpubr", "rstatix")
# This function checks if you have already installed the ez package. If yes, it is called to the library. If not, it is installed.
if (!requireNamespace("ez", "ggpubr")) {
stop(install.packages("ez", "ggpubr"))
} else {
library("ez")
}
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(ez)
library(emmeans)
library(ggpubr)
# This function checks if you have already installed the ez package. If yes, it is called to the library. If not, it is installed.
if (!requireNamespace("ez")) {
stop(install.packages("ez"))
} else {
library("ez")
}
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(ez)
library(emmeans)
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
library(rstatix)
library(rstatix)
posthoc_test %>% add_xy_position(x = "animal") +
ggboxplot(bushtuckerLong, x = "animal", y = "time to retch", add = "point") +
stat_pvalue_manual(posthoc_test)
posthoc_test %>% add_xy_position(x = "animal") +
ggboxplot(bushtuckerLong, x = "animal", y = "time to retch") +
stat_pvalue_manual(posthoc_test)
posthoc_test %>% add_xy_position(x = "animal") +
ggboxplot(bushtuckerLong, x = "animal", y = "time to retch")
plot(posthoc_test)
plot(posthoc_test)
plot(posthoc_test, 1)
? pairwise.t.test
posthoc_test <- pairwise.t.test(TimeToRetch~Animal, paired = TRUE, p.adjust.method = "bonferroni")
bushtuckerLong$
posthoc_test <- pairwise.t.test(bushtuckerLong$TimeToRetch, bushtuckerLong$Animal, paired = TRUE, p.adjust.method = "bonferroni")
posthoc_test <- pairwise.t.test(bushtuckerLong$TimeToRetch, bushtuckerLong$Animal, paired = TRUE, p.adjust.method = "bonferroni")
posthoc_test
emmeans(bushModel, pairwise ~ Animal)
PostHocTest(bushModel)
pairwise.t.test
?pairwise.t.test
# This function checks if you have already installed the ez package. If yes, it is called to the library. If not, it is installed.
if (!requireNamespace("ez")) {
stop(install.packages("ez"))
} else {
library("ez")
}
install.packages("ggpubr")
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(ez)
library(emmeans)
library(rstatix)
options(scipen = 999) # removes scientific notation
# Please adjust the path accordingly
setwd("~/Desktop/Stats planning/Script 10/")
bushtuckerDat <- read.delim("Bushtucker.dat", header = T)
str(bushtuckerDat)
participantRetch <- bushtuckerDat %>%
group_by(participant) %>%
dplyr::summarize(Mean = mean(c(stick_insect, kangaroo_testicle, fish_eye, witchetty_grub)),
Var = var(c(stick_insect, kangaroo_testicle, fish_eye, witchetty_grub)))
# Step 1: Convert the data to long format
bushtuckerLong <- pivot_longer(bushtuckerDat, cols = 2:5, names_to = "Animal", values_to = "TimeToRetch")
bushtuckerLong$Animal <- as.factor(bushtuckerLong$Animal)
# Step 2: Compute average values to retch by the animal that was eaten
averagesByAnimal <- bushtuckerLong %>%
group_by(Animal) %>%
dplyr::summarise(mean = mean(TimeToRetch))
summary_participantRetch <- summarySEwithin(data = bushtuckerLong, measurevar = "TimeToRetch", withinvars = "participant")
ggplot(data = summary_participantRetch, aes(x = participant, y = TimeToRetch, fill = participant))+
geom_bar(position = "dodge", stat = "summary", fun = "mean")+
geom_errorbar(aes(ymin=TimeToRetch-ci, ymax=TimeToRetch+ci),
width=.2,
position=position_dodge(.9))+
labs(x = "Participant", y = "Average time to retch (seconds)", fill = "participant",
title = "Average time to retch by participant")+
scale_fill_brewer(palette = "Pastel1")
bushModel<-ezANOVA(data = bushtuckerLong, dv = .(TimeToRetch), wid = .(participant),  within = .(Animal), type = 3, detailed = TRUE, return_aov = TRUE)
bushModel
emmeans(bushModel, ~Animal)
emmeans(bushModel$aov, ~Animal)
bushModel<-ezANOVA(data = bushtuckerLong, dv = TimeToRetch, wid = participant,  within = Animal, type = 3, detailed = TRUE, return_aov = TRUE)
emmeans(bushModel$aov, ~Animal)
pairwise.t.test(bushtuckerLong$TimeToRetch, bushtuckerLong$Animal, paired = TRUE, p.adjust.method = "bonferroni")
bushModel<-ezANOVA(data = bushtuckerLong, dv = .(TimeToRetch), wid = .(participant),  within = .(Animal), type = 3, detailed = TRUE, return_aov = TRUE)
bushModel<-ezANOVA(data = bushtuckerLong, dv = .(TimeToRetch), wid = .(participant),  within = .(Animal), type = 3, detailed = TRUE, return_aov = TRUE)
bushModel
bushModel
ezStats(data = bushtuckerLong, dv = .(Retch), wid = .(participant),  within = .(Animal), type = 3)
ezStats(data = bushtuckerLong, dv = .(TimeToRetch), wid = .(participant),  within = .(Animal), type = 3)
set.seed(62)
dat <- tibble(X = runif(100, -3, 3),
Y = 3 + 2 * X + rnorm(100))
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "blue")
set.seed(60)
dat <- tibble(X = runif(100, -3, 3),
Y = 3 + 2 * X + rnorm(100))
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "blue")
set.seed(62)
dat <- tibble(X = runif(100, -3, 3),
Y = 3 + 2 * X + rnorm(100))
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "blue")
dat <- tibble(X = runif(100, 0, 6),
Y = 3 + 2 * X + rnorm(100))
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "blue")
dat <- tibble(X = runif(100, 0, 3),
Y = 3 + 2 * X + rnorm(100))
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "blue")
dat <- tibble(X = runif(100, 0, 3.1),
Y = 3 + 2 * X + rnorm(100))
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "blue")
dat <- tibble(X = runif(100, 0, 6),
Y = 3 + 2 * X + rnorm(100))
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "blue")
dat <- tibble(X = runif(100, 0, 6),
Y = 4 + 2 * X + rnorm(100))
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 4, slope = 2, color = "blue")
dat <- tibble(X = runif(100, 0, 6),
Y = 3 + 2 * X + rnorm(100))
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "blue")
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "blue")+
geom_abline(intercept = 3, slope = 4, color = "red")
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 4, color = "green")+
geom_abline(intercept = 1, slope = 4, color = "pink")
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "blue")+
title("Figure 1: Simple regression line")
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "blue")+
title("Figure 1: Simple regression line")
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "blue")+
labs(title ="Figure 1: Simple regression line")
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 4, color = "green")+
geom_abline(intercept = 1, slope = 4, color = "pink")++
labs(title ="Figure 2: Regression lines with the same slope, and different intercepts")
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 4, color = "green")+
geom_abline(intercept = 1, slope = 4, color = "pink")+
labs(title ="Figure 2: Regression lines with the same slope, and different intercepts")
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "green")+
geom_abline(intercept = 1, slope = 2, color = "pink")+
labs(title ="Figure 2: Regression lines with the same slope, and different intercepts")
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "green")+
geom_abline(intercept = 1, slope = 2, color = "pink")+
labs(title ="Figure 2: Regression lines with the same slope, but different intercepts")
ggplot(dat, aes(X, Y)) +
geom_point() +
geom_abline(intercept = 3, slope = 2, color = "purple")+
geom_abline(intercept = 3, slope = 4, color = "orange")
bushModel<-lme(Retch ~ Animal, random = ~1|participant/Animal, data = bushtuckerLong, method = "ML")
install.packages("nlme")
library(nlme)
bushModel<-lme(Retch ~ Animal, random = ~1|participant/Animal, data = bushtuckerLong, method = "ML")
bushModel<-lme(TimeToRetch ~ Animal, random = ~1|participant/Animal, data = bushtuckerLong, method = "ML")
bushModel_multilevel<-lme(TimeToRetch ~ Animal, random = ~1|participant/Animal, data = bushtuckerLong, method = "ML")
bushModel_multilevel
bushModel_multilevel<-lme(TimeToRetch ~ Animal, random = ~1|participant/Animal, data = bushtuckerLong, method = "ML")
summary(bushModel_multilevel)
PartvsWhole<-c(1, -1, -1, 1)
TesticlevsEye<-c(0, -1, 1, 0)
StickvsGrub<-c(-1, 0, 0, 1)
contrasts(bushtuckerLong$Animal)<-cbind(PartvsWhole, TesticlevsEye, StickvsGrub)
contrasts(bushtuckerLong$Animal)
bushModel_multilevel<-lme(TimeToRetch ~ Animal, random = ~1|participant/Animal, data = bushtuckerLong, method = "ML")
summary(bushModel_multilevel)
levels(bushtuckerLong$Animal)
bushtuckerLong$Animal <- factor(bushtuckerLong$Animal, levels=c("stick_insect", "kangaroo_testicle", "fish_eye", "witchetty_grub"))
levels(bushtuckerLong$Animal)
PartvsWhole<-c(1, -1, -1, 1)
TesticlevsEye<-c(0, -1, 1, 0)
StickvsGrub<-c(-1, 0, 0, 1)
contrasts(bushtuckerLong$Animal)<-cbind(PartvsWhole, TesticlevsEye, StickvsGrub)
contrasts(bushtuckerLong$Animal)
bushModel_multilevel<-lme(TimeToRetch ~ Animal, random = ~1|participant/Animal, data = bushtuckerLong, method = "ML")
summary(bushModel_multilevel)
averagesByAnimal
bushModel_multilevel_baseline<-lme(TimeToRetch ~ Animal, random = ~1|participant/Animal, data = bushtuckerLong, method = "ML")
anova(bushModel_multilevel_baseline, bushModel_multilevel)
bushModel_multilevel_baseline<-lme(TimeToRetch ~ 1, random = ~1|participant/Animal, data = bushtuckerLong, method = "ML")
anova(bushModel_multilevel_baseline, bushModel_multilevel)
well <- anova(bushModel_multilevel_baseline, bushModel_multilevel)
summary(well)
summary.lm(well)
well
??glht()
emmeans::emmeans(bushModel_multilevel, ~Animal)
emmeans::emmeans(bushModel_multilevel, ~Animal)
emmeans::emmeans(bushModel_multilevel, pairwise~Animal)
multcomp::glht(bushModel_multilevel, linfct = mcp(Animal = "Tukey"))
TukeyHSD(bushModel_multilevel)
multcomp::glht(bushModel_multilevel, linfct = mcp("tension" = "Tukey"))
multcomp::glht(bushModel_multilevel, linfct = mcp("Animal" = "Tukey"))
library(multcomp)
multcomp::glht(bushModel_multilevel, linfct = mcp("Animal" = "Tukey"))
glht(bushModel_multilevel, linfct = mcp("Animal" = "Tukey"))
summary(posthoc)
posthoc_lme_bush <- glht(bushModel_multilevel, linfct = mcp("Animal" = "Tukey"))
summary(posthoc_lme_bush)
