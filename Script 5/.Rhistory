mean_income <- mean(data$Income)
# If you were to apply the function as follows...
# mean(Income)
# ... R would have thrown an error. That is because you have to indicate where the column comes from.
# Using the `$` operator to indicate that we need the column `Income` from our dataframe `data`. Once you type the dollar operator a list of suggestion will pop-up. Use this opportunity. If you click away press on the TAB key.
mean_income <- mean(data$Income)
# If you were to apply the function as follows...
# mean(Income)
# ... R would have thrown an error. That is because you have to indicate where the column comes from.
# Finding out the median income in our data
median_income <- median(data$Income)
mean_income < median_income #FALSE - boolean value representing NO
typeof(years_of_birth)
# Filtering
old <- data %>% # Take the `data` dataset AND
filter(years_of_birth <= 1970) # filter the dataset such that it includes only the people born before and including 1970
# Filtering
old <- data %>% # Take the `data` dataset AND
filter(years_of_birth <= 1970) # filter the dataset such that it includes only the people born before and including 1970
# Saving the years of birth in a variable
years_of_birth <- data$DOB
# Looking at the range of values. In R, the function `range()` delivers the minimum and the maximum observed values
range(years_of_birth)
# Looking at the range of values. In R, the function `range()` delivers the minimum and the maximum observed values
range(years_of_birth)
Step 2: Check whether the column contains values of numerical type. This is necessary because we want to compare values
```{r age_exercise2}
typeof(years_of_birth)
# Filtering
old <- data %>% # Take the `data` dataset AND
filter(years_of_birth <= 1970) # filter the dataset such that it includes only the people born before and including 1970
# Take a look at the result
old
tab <- tabulate(match(x, u)) # computes frequencies for each unique value in the actual column
find_mode <- function(x) {
u <- unique(x) # finds unique instances of each Income value
tab <- tabulate(match(x, u)) # computes frequencies for each unique value in the actual column
u[tab == max(tab)] # indexing the vector with unique instances of each Income value depending on their frequency
}
mode_income <- find_mode(data$Income)
mode_income # we have two modes, i.e., two most frequent values
hist(data$Income) # two peaks
plot(chicklick_outliers$arousal)
abline(h = mean(chicklick_outliers$arousal), col="red")
chicklick_outliers <- chicklick_outliers %>%
mutate(gender = as.factor(gender),
film = as.factor(film))
ggplot(data = chicklick_outliers, aes(x = film, y = arousal, fill = gender))+
geom_boxplot() +
stat_boxplot(geom = "errorbar")+
labs(x = "Film", y = "Average physiological arousal", fill = "Gender",
title = "Average physhiological arousal as a function of gender and watched film")+
scale_fill_brewer(palette = "Pastel1")
boxplot.stats(chicklick_outliers$arousal)$out
boxplot.stats(chicklick_outliers$arousal)
outliers_index <- which((chicklick_outliers$arousal %in% outliers))
outliers <- boxplot.stats(chicklick_outliers$arousal)$out
outliers
outliers_index <- which((chicklick_outliers$arousal %in% outliers))
outliers_index
?which
View(find_mode)
View(find_mode)
# defining the mean and the standard deviation
mean_chickflick <- mean(chicklick_outliers$arousal)
sd_chickflick <-  sd(chicklick_outliers$arousal)
chicklick_outliers <- chicklick_outliers %>%
mutate(z_scores = ((chicklick_outliers$arousal - mean_chickflick)/sd_chickflick))
chickflick_outliers
chickflick_outliers <- read_sav("ChickFlick_outliers.sav")
# defining the mean and the standard deviation
mean_chickflick <- mean(chickflick_outliers$arousal)
sd_chickflick <-  sd(chickflick_outliers$arousal)
plot(chickflick_outliers$arousal)
abline(h = mean(chickflick_outliers$arousal), col="red")
```
plot(chickflick_outliers$arousal)
abline(h = mean(chickflick_outliers$arousal), col="red")
chickflick_outliers <- chickflick_outliers %>%
mutate(gender = as.factor(gender),
film = as.factor(film))
```{r outliers_boxplot}
ggplot(data = chickflick_outliers, aes(x = film, y = arousal, fill = gender))+
geom_boxplot() +
stat_boxplot(geom = "errorbar")+
labs(x = "Film", y = "Average physiological arousal", fill = "Gender",
title = "Average physhiological arousal as a function of gender and watched film")+
scale_fill_brewer(palette = "Pastel1")
outliers <- boxplot.stats(chickflick_outliers$arousal)$out
outliers
outliers_index <- which((chickflick_outliers$arousal %in% outliers))
outliers_index
# defining the mean and the standard deviation
mean_chickflick <- mean(chickflick_outliers$arousal)
sd_chickflick <-  sd(chickflick_outliers$arousal)
chicklick_outliers <- chicklick_outliers %>%
mutate(z_scores = ((chicklick_outliers$arousal - mean_chickflick)/sd_chickflick))
chickflick_outliers
chickflick_outliers <- chickflick_outliers %>%
mutate(z_scores = ((chicklick_outliers$arousal - mean_chickflick)/sd_chickflick))
chickflick_outliers
# Step 1: Creating a copy of the `z-scores` column
chickflick_outliers <- chickflick_outliers %>%
mutate(z_scores2 = z_scores)
chickflick_outliers
chickflick_outliers <- chickflick_outliers %>%
mutate(z_scores = case_when(
z_scores > 3.29 ~ 4,
z_scores > 2.58 ~ 3,
z_scores > 1.96 ~ 2,
z_scores < 2 ~ 1
))
chickflick_outliers
extreme_values <- chickflick_outliers$z_scores > 1
extreme_values
chickflick_outliers[extreme_values == TRUE]
extreme_values <- chickflick_outliers %>%
filter(z_score > 1)
extreme_values <- chickflick_outliers %>%
filter(z_scores > 1)
# Using the pipe operator and the filter() function to find the
extreme_values <- chickflick_outliers %>%
filter(z_scores > 2)
extreme_values
install.packages("epiDisplay")
library(epiDisplay)
table(chickflick_outliers$z_scores)
tab1(chickflick_outliers$z_scores)
tab1(chickflick_outliers$z_scores)$1
tab1(chickflick_outliers$z_scores)
table(chickflick_outliers$z_scores)
tab1(chickflick_outliers$z_scores)
#suppress the warnings and other messages from showing in the knitted file.
knitr::opts_chunk$set(
fig.width  = 8,
fig.height = 5,
echo       = TRUE,
warning    = FALSE,
message    = FALSE,
cache      = TRUE
)
#install.packages("epiDisplay") # for frequency tables; uncomment if not previously installed
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(haven) # for loading .sav datasets (or other SPSS datasets)
library(dplyr) # great for summary statistics, offers all necessary functions for measures of central tendency
library(lubridate)
library(epiDisplay)
# Please adjust the path accordingly. This means you should create a separate folder for this second course and script within your (hopefully) already existing R directory. Copy that path here!
setwd("/Users/anamariaplesca/Desktop/Stats planning/Script 2")
chickflick_outliers <- read_sav("ChickFlick_outliers.sav")
chickflick_simplified <- read_sav("ChickFlick_simple.sav")
# Reading in data you are already familiar with. This data is in comma separated value format. We'll use the read_csv() function
data <- read_csv("Data with which to play.csv")
# Using the `$` operator to indicate that we need the column `Income` from our dataframe `data`. Once you type the dollar operator a list of suggestion will pop-up. Use this opportunity. If you click away press on the TAB key.
mean_income <- mean(data$Income)
# If you were to apply the function as follows...
# mean(Income)
# ... R would have thrown an error. That is because you have to indicate where the column comes from.
# Finding out the median income in our data
median_income <- median(data$Income)
mean_income < median_income #FALSE - boolean value representing NO
# Saving the years of birth in a variable
years_of_birth <- data$DOB
# Looking at the range of values. In R, the function `range()` delivers the minimum and the maximum observed values
range(years_of_birth)
typeof(years_of_birth)
# Filtering
old <- data %>% # Take the `data` dataset AND
filter(years_of_birth <= 1970) # filter the dataset such that it includes only the people born before and including 1970
# Take a look at the result
old
# Don't worry, you are not expected to understand all of this now. Just keep in mind that it is a function
# that computes the mode for you
find_mode <- function(x) {
u <- unique(x) # finds unique instances of each Income value
tab <- tabulate(match(x, u)) # computes frequencies for each unique value in the actual column
u[tab == max(tab)] # indexing the vector with unique instances of each Income value depending on their frequency
}
mode_income <- find_mode(data$Income)
mode_income # we have two modes, i.e., two most frequent values
hist(data$Income) # two peaks
# Run both lines of code together to create a scatterplot and to add a line representing the mean as a model
plot(chickflick_outliers$arousal)
abline(h = mean(chickflick_outliers$arousal), col="red")
# All categorical variables need to be converted to factors before attempting to plotting the data. Skipping this step leads to odd-looking plots. We are using the pipe operator `%>%` and the mutate() function to modify the gender column in our data.
# We are basically intructing are as such:
# 1. Take the dataset chickflick_outliers
# 2. Mutate/Add:
#   2a. a column named gender, where the already existing column gender is transformed from the character to the factor type
#   2b. a column named film, where the already existing column film is transformed from the character to the factor type
chickflick_outliers <- chickflick_outliers %>%
mutate(gender = as.factor(gender),
film = as.factor(film))
ggplot(data = chickflick_outliers, aes(x = film, y = arousal, fill = gender))+
geom_boxplot() +
stat_boxplot(geom = "errorbar")+
labs(x = "Film", y = "Average physiological arousal", fill = "Gender",
title = "Average physhiological arousal as a function of gender and watched film")+
scale_fill_brewer(palette = "Pastel1")
outliers <- boxplot.stats(chickflick_outliers$arousal)$out
outliers
outliers_index <- which((chickflick_outliers$arousal %in% outliers))
# What which() does:
# Which compares the values in the entire arousal column with the values stored in our `outliers` vector.
# Then it delivers the indices for which the comparison yields a TRUE answer.
outliers_index
# Saving the mean and the standard deviation in variables
mean_chickflick <- mean(chickflick_outliers$arousal)
sd_chickflick <-  sd(chickflick_outliers$arousal)
chickflick_outliers <- chickflick_outliers %>%
mutate(z_scores = ((chickflick_outliers$arousal - mean_chickflick)/sd_chickflick))
# new values are computed for each value in the arousal column
chickflick_outliers
# Let's recode the z-scores
chickflick_outliers <- chickflick_outliers %>%
mutate(z_scores = case_when(
z_scores > 3.29 ~ 4,
z_scores > 2.58 ~ 3,
z_scores > 1.96 ~ 2,
z_scores < 2 ~ 1
))
# Check the result
chickflick_outliers
# Using the pipe operator and the filter() function to find the extreme values
extreme_values <- chickflick_outliers %>%
filter(z_scores > 2)
# Check the results
extreme_values
table(chickflick_outliers$z_scores)
tab1(chickflick_outliers$z_scores)
tab2(chickflick_outliers$z_scores)
tab1(chickflick_outliers$z_scores)
chickflick_no_outliers <- chickflick_outliers %>%
filter(!z_scores > 3)
# Check the result
chickflick_no_outliers
# Let's exclude all z-scores equal to or larger than 3.
chickflick_no_outliers <- chickflick_outliers %>%
filter(!z_scores >= 3)
# Check the result
chickflick_no_outliers
chickflick_simplified
durbinWatsonTest()
car::durbinWatsonTest()
female_chickflick_subset <- chickflick_simplified %>%
group_by(gender) %>%
filter(gender == "female")
chickflick_simplified
female_chickflick_subset <- chickflick_simplified %>%
group_by(gender) %>%
filter(gender == "2")
female_chickflick_subset <- chickflick_simplified %>%
group_by(gender) %>%
filter(gender == 2)
female_chickflick_subset
View(female_chickflick_subset)
female_chickflick_summary <- summary(female_chickflick_subset)
female_chickflick_summary
female_chickflick_summary <- summary(female_chickflick_subset$arousal)
female_chickflick_summary
female_chickflick_summary <- summarySE(female_chickflick_subset$arousal)
female_chickflick_summary <- summarySEwithin(female_chickflick_subset$arousal)
female_chickflick_summary <- pastecs::stat.desc(female_chickflick_subset$arousal)
female_chickflick_summary
female_chickflick_summary <- psych::describe(female_chickflick_subset$arousal)
female_chickflick_summary
hist(female_chickflick_subset$arousal)
qqnorm(female_chickflick_subset$arousal)
qqline(female_chickflick_subset$arousal)
shapiro.test(female_chickflick_subset$arousal)
ks.test(female_chickflick_subset$arousal)
ks.test(female_chickflick_subset, female_chickflick_subset$arousal)
ks.test(female_chickflick_subset, female_chickflick_subset$arousal)
LcKS
?LcKS
install.packages("Kscorrect")
install.packages("KScorrect")
LcKS(female_chickflick_subset$arousal)
lillie.test
lillie.test(female_chickflick_subset$arousal)
nortest::lillie.test(female_chickflick_subset$arousal)
nortest::lillie.test(female_chickflick_subset$arousal)
female_chickflick_summary
female_chickflick_summary
# Creating a subset containing data from both genders
gender_subset <- chickflick_simplified %>%
group_by(gender)
gender_subset
levene_test(gender_subset, arousal ~ gender)
leveneTest(gender_subset, arousal ~ gender)
levene.Test(gender_subset, arousal ~ gender)
?leveneTest()
car::leveneTest(gender_subset, arousal ~ gender)
car::leveneTest(gender_subset, gender ~ arousal)
car::leveneTest(arousal ~ gender, data = gender_subset)
gender_subset
car::leveneTest(arousal ~ gender, data = chickflick_simplified)
car::leveneTest(arousal ~ gender, data = chickflick_simplified)
chickflick_simplified
chickflick_simplified <- chickflick_simplified %>%
mutate(gender = recode(gender,
1 = "Male",
chickflick_simplified <- chickflick_simplified %>%
mutate(gender = recode_factor(gender,
1 = "Male",
chickflick_simplified$gender
chickflick_simplified$gender <- as.factor(chickflick_simplified$gender)
car::leveneTest(arousal ~ gender, data = chickflick_simplified)
chickflick_simplified <- chickflick_simplified %>%
mutate(gender = recode(gender,
1 = "Male",
chickflick_simplified <- chickflick_simplified %>%
mutate(gender = recode(gender,
"1" = "Male",
"2" = "Female"))
chickflick_simplified
car::leveneTest(arousal ~ gender, data = chickflick_simplified)
chickflick_simplified <- chickflick_simplified %>%
mutate(logArousal = log(arousal))
# Check the result
```
# Check the result
chickflick_simplified
library(Hmisc)
library(ggplot2)
library(polycor)
library(tidyverse)
setwd("~/Desktop/Stats planning/Script 5") # please adjust this path
examAnxiety <- haven::read_sav("Exam Anxiety.sav")
examAnxiety
?cor.test()
examAnxiety
title = "Relationship between revision done for the exam and exam performance"
ggplot(examAnxiety, aes(Exam, Revise))+
geom_point(size = 2)+
geom_smooth(method = "lm", color = "green", se = F) +
labs(x = "Exam Performance (%)", y = "Revision",
title = "Relationship between revision done for the exam and exam performance")
```{r, warning = F}
ggplot(examAnxiety, aes(Exam, Revise))+
geom_point(size = 2)+
geom_smooth(method = "lm", color = "green", se = F) +
labs(x = "Exam Performance (%)", y = "Revision",
title = "Relationship between revision done for the exam and exam performance")
ggplot(examAnxiety, aes(Exam, Revise))+
geom_point(size = 2)+
geom_smooth(method = "lm", color = "green", se = F) +
labs(x = "Exam Performance (%)", y = "Revision",
title = "Relationship between revision done for the exam and exam performance")
ggplot(examAnxiety, aes(Exam, Revise))+
geom_point(size = 2)+
geom_smooth(method = "lm", color = "green", se = F) +
labs(x = "Exam Performance (%)", y = "Revision",
title = "Relationship between revision done for the exam and exam performance")
ggplot(examAnxiety, aes(Exam, Revise))+
geom_point(size = 2)+
geom_smooth(method = "lm", color = "green", se = F) +
labs(x = "Exam Performance (%)", y = "Revision",
title = "Relationship between revision done for the exam and exam performance")
ggplot(examAnxiety, aes(Exam, Anxiety))+
geom_point(size = 3) +
geom_smooth(method = "lm", color = "red", se = F) + # changed the color of the regression line + switched off CIs based on standard error
labs(x = "Exam Performance (%)", y = "Exam Anxiety",
title = "Relationship between exam anxiety and exam performance")
cor(x = examAnxiety$Exam, y = examAnxiety$Anxiety)
y = 90.8682 + -0.2921 * 20
y
hist(examAnxiety$Anxiety)
ggplot(data = examAnxiety, x = Anxiety)+
geom_histogram()
ggplot(data = examAnxiety, aes(x = Anxiety))+
geom_histogram(color = "blue", fill = "lightblue", bins = 10)
ggplot(data = examAnxiety, aes(x = Anxiety))+
geom_histogram(color = "blue", fill = "lightblue", bins = 10)+
geom_density(lwd = 1.2,linetype = 1, colour = 2)
ggplot(data = examAnxiety, aes(x = Anxiety))+
geom_histogram(color = "blue", fill = "lightblue", bins = 10)+
geom_density()
ggplot(data = examAnxiety, aes(x = Anxiety))+
geom_histogram(color = "blue", fill = "lightblue", bins = 10)+
geom_density()
ggplot(data = examAnxiety, aes(x = Anxiety))+
geom_histogram(aes(y = ..density..),color = "blue", fill = "lightblue", bins = 10)+
geom_density()
ggplot(data = examAnxiety, aes(x = Anxiety))+
geom_histogram(aes(y = ..density..),color = "blue", fill = "lightblue", bins = 10)+
geom_density(color = "red")
hist(examAnxiety$Exam)
hist(examAnxiety$Revise)
ggplot(data = examAnxiety, aes(x = Exam))+
geom_histogram(aes(y = ..density..),color = "blue", fill = "lightblue", bins = 10)+
geom_density(color = "red")
ggplot(data = examAnxiety, aes(x = Exam))+
geom_histogram(aes(y = ..density..),color = "blue", fill = "lightblue", bins = 10)+
geom_density(color = "red")
ggplot(data = examAnxiety, aes(x = Revise))+
geom_histogram(aes(y = ..density..),color = "blue", fill = "lightblue", bins = 10)+
geom_density(color = "red")
nortest::lillie.test(examAnxiety$Anxiety)
options(scipen = 999)
library(nortest)
options(scipen = 999)
nortest::lillie.test(examAnxiety$Anxiety)
hist(examAnxiety$Exam)
nortest::lillie.test(examAnxiety$Exam)
nortest::lillie.test(examAnxiety$Revise)
cor.test(examAnxiety$Exam, examAnxiety$Anxiety, alternative = "less", method = "spearman")
cor.test(examAnxiety$Exam, examAnxiety$Anxiety, alternative = "less", method = "spearman")
cor.test(examAnxiety$Exam, examAnxiety$Revise, alternative = "greater", method = "spearman")
cor(examAnxiety$Exam, examAnxiety$Anxiety)^2
cor(examAnxiety$Exam, examAnxiety$Revise)^2
employee_manager_data <- haven::read_sav("Mydata.sav")
head(employee_manager_data)
ggplot(employee_manager_data, aes(x = Group, y = Alcohol))+
geom_bar()
employee_manager_data
ggplot(employee_manager_data, aes(x = Group, y = Alcohol, fill = Group))+
geom_bar()
typeof(employee_manager_data$Group)
employee_manager_data$Group <- as.factor(employee_manager_data$Group)
typeof(employee_manager_data$Group)
ggplot(employee_manager_data, aes(x = Group, y = Alcohol, fill = Group))+
geom_bar()
ggplot(employee_manager_data, aes(x = Group, y = Alcohol, fill = Group))+
geom_bar(position = "dodge", stat = "summary", fun = "mean")
employee_manager_data_summary <- summarySE(employee_manager_data, measurevar = "Alcohol", groupvars = "Group")
?summarySE
employee_manager_data_summary <- summarySE(employee_manager_data, measurevar = "Alcohol", groupvars = "Group")
library(Rmisc)
employee_manager_data_summary <- summarySE(employee_manager_data, measurevar = "Alcohol", groupvars = "Group")
View(employee_manager_data_summary)
employee_manager_data_summary
# You could also recode the factor to be more informative
employee_manager_data <- employee_manager_data %>%
mutate(Group = recode_factor(Group,
1 = "Managers",
# You could also recode the factor to be more informative
employee_manager_data <- employee_manager_data %>%
mutate(Group = recode_factor(Group,
"1" = "Managers",
"2" = "Employees"))
View(employee_manager_data)
employee_manager_data
# You could also recode the factor to be more informative
employee_manager_data <- employee_manager_data %>%
mutate(Group = recode_factor(Group,
"1" = "Manager",
"2" = "Employee"))
employee_manager_data
# You could also recode the factor to be more informative
employee_manager_data <- employee_manager_data %>%
mutate(Group = recode_factor(Group,
"1" = "Manager",
"2" = "Employee"))
employee_manager_data
employee_manager_data <- haven::read_sav("Mydata.sav")
head(employee_manager_data)
employee_manager_data$Group <- as.factor(employee_manager_data$Group)
# You could also recode the factor to be more informative
employee_manager_data <- employee_manager_data %>%
mutate(Group = recode_factor(Group,
"1" = "Manager",
"2" = "Employee"))
employee_manager_data
employee_manager_data_summary <- summarySE(employee_manager_data, measurevar = "Alcohol", groupvars = "Group")
employee_manager_data_summary
ggplot(employee_manager_data, aes(x = Group, y = Alcohol, fill = Group))+
geom_bar(position = "dodge", stat = "summary", fun = "mean")+
geom_errorbar(ymin = Alcohol - ci, ymax = Alcohol +ci)
ggplot(employee_manager_data, aes(x = Group, y = Alcohol, fill = Group))+
geom_bar(position = "dodge", stat = "summary", fun = "mean")+
geom_errorbar(ymin = "Alcohol - ci", ymax = "Alcohol +ci")
ggplot(employee_manager_data, aes(x = Group, y = Alcohol, fill = Group))+
geom_bar(position = "dodge", stat = "summary", fun = "mean")+
geom_errorbar(aes(ymin=Alcohol-ci, ymax=Alcohol+ci),
width=.2,
position=position_dodge(.9))+
labs(x = "Film", y = "Average alcohol consumption", fill = "Group",
title = "Average alcohol consumption by group")+
scale_fill_brewer(palette = "Reds")
ggplot(employee_manager_data_summary, aes(x = Group, y = Alcohol, fill = Group))+
geom_bar(position = "dodge", stat = "summary", fun = "mean")+
geom_errorbar(aes(ymin=Alcohol-ci, ymax=Alcohol+ci),
width=.2,
position=position_dodge(.9))+
labs(x = "Film", y = "Average alcohol consumption", fill = "Group",
title = "Average alcohol consumption by group")+
scale_fill_brewer(palette = "Reds")
ggplot(employee_manager_data, aes(Neurotic, Alcohol))+
geom_point(size = 3) +
geom_smooth(method = "lm", color = "red", se = F) + # changed the color of the regression line + switched off CIs based on standard error
labs(x = "Exam Performance (%)", y = "Exam Anxiety",
title = "Relationship between exam anxiety and exam performance") +
facet_wrap(~Group)
ggplot(employee_manager_data, aes(Neurotic, Alcohol))+
geom_point(size = 3) +
geom_smooth(method = "lm", color = "red", se = F) +
labs(x = "Neuroticism score", y = "Alcohol consumption",
title = "Relationship between exam anxiety and exam performance") +
facet_wrap(~Group)
hist(employee_manager_data$Alcohol)
shapiro.test(employee_manager_data$Alcohol)
shapiro.test(employee_manager_data$Alcohol, employee_manager_data$Neurotic)
shapiro.test(employee_manager_data$Alcohol)
hist(employee_manager_data$Neurotic)
shapiro.test(employee_manager_data$Neurotic)
?cor.test
cor.test(employee_manager_data$Alcohol, employee_manager_data$Neurotic, alternative = "two.sided",
method = "pearson")
examAnxiety_lm <- lm(Exam ~ Anxiety, data = examAnxiety)
