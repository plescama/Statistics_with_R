spiderWider <- spiderLong %>%
pivot_wider(names_from = Group, values_from = Anxiety, values_fn = identity)
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(names_from = Group, values_from = Anxiety)
View(spiderWider)
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(names_from = Group, values_from = Anxiety)
# Option 2: reshape the data
spiderWider <- spiderLong %>%
tidyr::pivot_wider(names_from = Group, values_from = Anxiety)
spiderWider
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(names_from = Group, values_from = Anxiety, names_sep = "")
spiderWider
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(names_from = Group, values_from = Anxiety, names_sep = " ")
spiderWider
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(names_from = Group, values_from = Anxiety, names_sep = "\t")
spiderWider
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(names_from = Group, values_from = Anxiety, names_sep = "\n")
spiderWider
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(names_from = Group, values_from = Anxiety, names_sep = " ")
spiderWider
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(names_from = Group, values_from = Anxiety)
spiderLong
head(spiderLong)
str(spiderLong)
spiderLong <- data.frame(Group = rep(c("Picture", "Real"), each = 12),
Anxiety = c(30, 35, 45, 40, 50, 35, 55, 25, 30, 45, 40, 50, 40, 35, 50, 55, 65, 55, 50, 35, 30, 50, 60, 39))
spiderLong <- data.frame(Group = rep(c("Picture", "Real"), each = 12),
Anxiety = c(30, 35, 45, 40, 50, 35, 55, 25, 30, 45, 40, 50, 40, 35, 50, 55, 65, 55, 50, 35, 30, 50, 60, 39))
**Explore the data**
```{r}
str(spiderLong)
str(spiderLong)
```{r}
head(spiderLong)
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(names_from = Group, values_from = Anxiety)
spiderWider
# Option 2: reshape the data
spiderWider <- reshape(spiderLong, idvar = "Group", timevar = "Anxiety", direction = "wide")
spiderWider
spiderWider
View(spiderWider)
?reshape()
# Option 2: reshape the data
spiderWider <- reshape(spiderLong, idvar = "Group", times = "Anxiety", direction = "wide")
spiderWider
# Option 2: reshape the data
spiderWider <- reshape(spiderLong, idvar = "Group", times = "Anxiety", direction = "wide")
# Option 2: reshape the data
spiderWider <- reshape::cast(spiderLong, Group ~ Values)
# Option 2: reshape the data
spiderWider <- reshape::cast(spiderLong, Group ~ Anxiety)
# Option 2: reshape the data
spiderWider <- reshape::cast(spiderLong, Group ~ Anxiety)
spiderLong
# Option 2: reshape the data
spiderWider <- reshape::cast(spiderLong, Group ~ Anxiety)
# Option 2: reshape the data
spiderWider <- reshape2::dcast(spiderLong, Group ~ Anxiety)
spiderWider
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(names_from = Group, values_from = Anxiety)
spiderLong
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(names_from = Group, values_from = Anxiety)
spiderWider
spiderWider$Picture
spiderWider$Picture <- unlist(spiderWider$Picture)
Picture
spiderWider$Picture
str(spiderWider$Picture)
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(names_from = "Group", values_from = "Anxiety")
spiderWider
car::leveneTest(Group ~ Anxiety, data = spiderLong)
spiderLong$Group <- as.factor(spiderLong$Group)
levene.test(Group ~ Anxiety, data = spiderLong)
car::leveneTest(Group ~ Anxiety, data = spiderLong)
car::leveneTest(Anxiety ~ Group, data = spiderLong)
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(names_from = Group, values_from = Anxiety)
#suppress the warnings and other messages from showing in the knitted file.
knitr::opts_chunk$set(
fig.width  = 8,
fig.height = 5,
echo       = TRUE,
warning    = FALSE,
message    = FALSE,
cache      = TRUE
)
options(repos = list(CRAN="http://cran.rstudio.com/"))
spiderLong <- data.frame(Group = rep(c("Picture", "Real"), each = 12),
Anxiety = c(30, 35, 45, 40, 50, 35, 55, 25, 30, 45, 40, 50, 40, 35, 50, 55, 65, 55, 50, 35, 30, 50, 60, 39))
spiderLong <- read.delim("SpiderLong.dat")
```{r}
head(spiderLong)
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(cols = 1:2, names_from = Group, values_from = Anxiety)
library(tidyverse)
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(cols = 1:2, names_from = Group, values_from = Anxiety)
?pivot_wider
# Option 2: reshape the data
spiderWider <- spiderLong %>%
pivot_wider(id_cols = Group, names_from = Group, values_from = Anxiety)
# Option 2: reshape the data
spiderLong <- spiderLong %>%
mutate(participant = 1:24)
spiderWider <- spiderLong %>%
pivot_wider(id_cols = participant, names_from = Group, values_from = Anxiety)
spiderWider
# Conducting a normality test for the picture subset
shapiro.test(spiderWider$Picture)
# Conducting a normality test for the real subset
shapiro.test(spiderWider$Real)
psych::describe(c(12,23,54,32,1,1,23,3,))
psych::describe(c(12,23,54,32,1,1,23,3,2))
#suppress the warnings and other messages from showing in the knitted file.
knitr::opts_chunk$set(
fig.width  = 8,
fig.height = 5,
echo       = TRUE,
warning    = FALSE,
message    = FALSE,
cache      = TRUE
)
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(haven) # for loading .sav datasets (or other SPSS datasets)
library(dplyr) # great for summary statistics, offers all necessary functions for measures of central tendency
data <- read.csv("Data with which to play.csv")
summary_data <- data %>%
dplyr::group_by(Group) %>%
dplyr::summarise(mean_friends = mean(Friends), se_friends = sd(Friends)/sqrt(dplyr::n()))
summary_data
ggplot(summary_data, aes(x=factor(Group), y=mean_friends)) +
geom_bar(stat="identity",) +
geom_errorbar(aes(ymin=mean_friends-se_friends, ymax=mean_friends+se_friends),
width=0.2, position=position_dodge(0.9)) +
labs(x = "Group", y = "Mean Number of Friends")
summary_data <- data %>%
dplyr::group_by(Group) %>%
dplyr::summarise(mean_alcohol = mean(Alcohol, na.rm = TRUE),
se_alcohol = sd(Alcohol, na.rm = TRUE)/sqrt(dplyr::n()),
ci_alcohol = qt(0.975, df=n()-1) * se_alcohol)
# Create the bar chart with error bars
ggplot(summary_data, aes(x=Group, y=mean_alcohol)) +
geom_bar(stat="identity",) +
geom_errorbar(aes(ymin=mean_alcohol-ci_alcohol, ymax=mean_alcohol+ci_alcohol),
width=0.2, position=position_dodge(0.9)) +
labs(x = "Group", y = "Mean Alcohol Consumption") +
theme_bw()
groups1 <- data %>%
mutate(Age_Group = ifelse(DOB < 1980, "Old", "Young"))
alc_group1 <- groups1 %>%
group_by(Age_Group) %>%
summarise(mean_alcohol = mean(Alcohol, na.rm = TRUE))
summary(alc_group1)
reading_between <- read_sav("reading_indep.sav")
reading_within <- read_sav("reading.sav")
typeof(reading_between$parallelism) # double
reading_between3 <- as.factor(reading_between$parallelism)
reading_between4 <- summary(reading_between)
reading_between4
reading_between5 <- reading_between4 %>%
group_by(parallelism) %>%
summarise(mean_reading_time = mean(reading_times, na.rm = TRUE))
ggplot(avg_times, aes(x = parallelism, y = mean_reading_time)) +
geom_line() +
geom_point() +
labs(x = "Parallelism", y = "Average Reading Time")
reading_within_tall <- reading_within %>%
pivot_longer(cols = 2:3, names_to = "parallelism", values_to = "reading_times", values_drop_na = TRUE)
# Check the result
reading_within_tall
# Make sure that parallelism is a factor
reading_within_tall$parallelism <- as.factor(reading_within_tall$parallelism)
# Make sure that the subject column is a factor
reading_within_tall$subj <- as.factor(reading_within_tall$subj)
reading_between <- read_sav("reading_indep.sav")
reading_within <- read_sav("reading.sav")
t5_2 <- ggplot(load_data_t5, aes(x = condition, y = mean_reading_time, fill = condition)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_reading_time-ci, ymax=mean_reading_time+ci), width=.2, position=position_dodge(.9)) +
labs(x = "Condition", y = "Mean Reading Time")
load_data_t5 <- read.csv("QuestionSet1.csv")
t5_2 <- ggplot(load_data_t5, aes(x = condition, y = mean_reading_time, fill = condition)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_reading_time-ci, ymax=mean_reading_time+ci), width=.2, position=position_dodge(.9)) +
labs(x = "Condition", y = "Mean Reading Time")
t5_2
#suppress the warnings and other messages from showing in the knitted file.
knitr::opts_chunk$set(
fig.width  = 8,
fig.height = 5,
echo       = TRUE,
warning    = FALSE,
message    = FALSE,
cache      = TRUE
)
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(haven)
library(tidyverse)
library(Rmisc)
#suppress the warnings and other messages from showing in the knitted file.
knitr::opts_chunk$set(
fig.width  = 8,
fig.height = 5,
echo       = TRUE,
warning    = FALSE,
message    = FALSE,
cache      = TRUE
)
options(repos = list(CRAN="http://cran.rstudio.com/"))
spiderWide <- read_csv("SpiderWide.csv")
# Look at the structure of your data
str(spiderWide)
spiderWide2 <- spiderWide %>%
mutate(pMean = mean(picture, real))
spiderWide
spiderWide2 <- spiderWide %>%
mutate(pMean = mean(picture, real))
mean(spiderWide$picture, spiderWide$real)
spiderWide2 <- spiderWide %>%
mutate(pMean = mean(c(picture, real)))
?mean
spiderWide2
grandMean<-mean(c(spiderWide$picture, spiderWide$real))
grandMean
grandMean<-mean(c(spiderWide$picture, spiderWide$real))
grandMean
rm(grandmean)
rm(grandMean)
spiderWide <- read_csv("SpiderWide.csv")
# Look at the structure of your data
str(spiderWide)
spiderWide <- spiderWide %>%
mutate(pMean = (spiderWide$picture + spiderWide$real)/2)
#Check the result
spiderWide
pMean = (spiderWide$picture + spiderWide$real)/2
rm(pMean)
grandMean<-mean(c(spiderWide$picture, spiderWide$real))
grandMean
mean(c(19,20))
pMean = mean(c( spiderWide$picture, spiderWide$real))
pMean
grandMean<-mean(c(spiderWide$picture, spiderWide$real))
grandMean
pMean_test = mean(c(spiderWide$picture, spiderWide$real))
pMean_test
spiderWide <- spiderWide %>%
mutate(pMean = (spiderWide$picture + spiderWide$real)/2)
spiderWide
View(spiderWide)
rm(pMean_test)
spiderWide <- spiderWide %>%
mutate(adj = grandMean-spiderWide$pMean)
# Check the result
spiderWide
spiderWide <- spiderWide %>%
mutate(pictureAdjusted = picture + adj,
realAdjusted = real + adj
)
# Check the result
spiderWide
spiderWide <- spiderWide %>%
mutate(adj = grandMean-spiderWide$pMean)
spiderWide
viagraDat <- read.delim("Viagra.dat")
View(viagraDat)
str(viagraDat)
viagraDat
viagraDat <- viagraDat %>%
mutate(dose = recode_factor(dose,
1 = "Placebo",
viagraDat <- viagraDat %>%
mutate(dose = recode_factor(dose,
"1" = "Placebo",
"2" = "Low dose",
"3" = "High dose"))
viagraDat
typeof(viagraDat$dose)
viagraDat$dose <- as.factor(viagraDat$dose)
typeof(viagraDat$dose)
viagraDat$dose <- as.factor(viagraDat$dose)
typeof(viagraDat$dose)
typeof(viagraDat$dose)
viagraDat <- viagraDat %>%
mutate(dose = recode_factor(dose,
"1" = "Placebo",
"2" = "Low dose",
"3" = "High dose"))
viagraDat
typeof(viagraDat$dose)
viagraDat$dose
viagraDat <- viagraDat %>%
mutate(dose = recode_factor(dose,
"1" = "Placebo",
"2" = "Low dose",
"3" = "High dose"))
viagraDat$dose
class(viagraDat$dose)
viagraDat %>%
group_by(dose) %>%
psych::describe(dose)
viagraDat %>%
group_by(dose) %>%
psych::describe(viagraDat$dose)
??describe()
psych::describe(libido ~ dose, data = viagraDat)
summary_viagraDat <-  summarySE(data = viagraDat, measurevar = "libido", groupvars = "dose")
summary_viagraDat
ggplot(data = summary_viagraDat, aes(x = dose, y = libido))+
geom_line()
ggplot(data = summary_viagraDat, aes(x = dose, y = libido, group = dose))+
geom_line()
ggplot(data = summary_viagraDat, aes(x = dose, y = libido, group = dose))+
geom_line()
line + stat_summary(fun.y = mean, geom = "line", size = 1, aes(group=1), colour = "#FF6633") + stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.2, size = 0.75, colour = "#990000") + stat_summary(fun.y = mean, geom = "point", size = 4, colour = "#990000") + stat_summary(fun.y = mean, geom = "point", size = 3, colour = "#FF6633") + labs(x = "Dose of Viagra", y = "Mean Libido")
ggplot(data = summary_viagraDat, aes(x = dose, y = libido, group = dose))+
geom_line()
View(summary_viagraDat)
ggplot(data = viagraDat, aes(x = dose, y = libido, group = dose))+
geom_line()
ggplot(data = summary_viagraDat, aes(x = dose, y = libido, group = dose))+
geom_point()
ggplot(data = summary_viagraDat, aes(x = dose, y = libido, group = dose))+
geom_point()+
geom_line()
ggplot(data = summary_viagraDat, aes(x = dose, y = libido, group = dose))+
geom_point(aes(fill = dose))+
```
ggplot(data = summary_viagraDat, aes(x = dose, y = libido, group = dose))+
geom_point(aes(fill = dose))
ggplot(data = summary_viagraDat, aes(x = dose, y = libido, group = dose))+
geom_point(aes(group = dose))
ggplot(data = summary_viagraDat, aes(x = dose, y = libido, fill = dose))+
geom_point(aes(fill = dose))
ggplot(data = summary_viagraDat, aes(x = dose, y = libido, group = dose))+
geom_point(aes(fill = dose))+
geom_line()
+ stat_summary(fun.y = mean, geom = "line", size = 1, aes(group=1), colour = "#FF6633") + stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.2, size = 0.75, colour = "#990000") + stat_summary(fun.y = mean, geom = "point", size = 4, colour = "#990000") + stat_summary(fun.y = mean, geom = "point", size = 3, colour = "#FF6633") + labs(x = "Dose of Viagra", y = "Mean Libido")
ggplot(viagraData, aes(dose, libido))+
stat_summary(fun.y = mean, geom = "line", size = 1, aes(group=1), colour = "#FF6633")+
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.2, size = 0.75, colour = "#990000") + stat_summary(fun.y = mean, geom = "point", size = 4, colour = "#990000") + stat_summary(fun.y = mean, geom = "point", size = 3, colour = "#FF6633") + labs(x = "Dose of Viagra", y = "Mean Libido")
ggplot(viagraDat, aes(dose, libido))+
stat_summary(fun.y = mean, geom = "line", size = 1, aes(group=1), colour = "#FF6633")+
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.2, size = 0.75, colour = "#990000") + stat_summary(fun.y = mean, geom = "point", size = 4, colour = "#990000") + stat_summary(fun.y = mean, geom = "point", size = 3, colour = "#FF6633") + labs(x = "Dose of Viagra", y = "Mean Libido")
ggplot(summary_viagraDat, aes(x=dose, y=libido, group=dose, color=dose)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))
ggplot(summary_viagraDat, aes(x=dose, y=libido, group=dose, color=dose)) +
geom_line()+
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))
ggplot(summary_viagraDat, aes(x=dose, y=libido, group=dose, color=dose)) +
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))+
geom_path()
ggplot(summary_viagraDat, aes(x=dose, y=libido, group=dose, color=dose)) +
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))+
geom_line()
ggplot(summary_viagraDat, aes(x=dose, y=libido, group=1, color=dose)) +
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))+
geom_line()
ggplot(summary_viagraDat, aes(x=dose, y=libido, color=dose)) +
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))+
geom_line()
ggplot(summary_viagraDat, aes(x=dose, y=libido, color=dose)) +
geom_point(group = 1)+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))+
geom_line()
ggplot(summary_viagraDat, aes(x=dose, y=libido, group=1, color=dose)) +
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))+
geom_line()
viagraDat <- viagraDat %>%
mutate(dose = recode(dose,
"1" = "Placebo",
"2" = "Low dose",
"3" = "High dose"))
viagraDat$dose
class(viagraDat$dose)
psych::describe(libido ~ dose, data = viagraDat)
summary_viagraDat <-  summarySE(data = viagraDat, measurevar = "libido", groupvars = "dose")
ggplot(summary_viagraDat, aes(x=dose, y=libido, group=1, color=dose)) +
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))+
geom_line()
ggplot(summary_viagraDat, aes(x=dose, y=libido, color=dose)) +
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))+
geom_line()
viagraDat <- read.delim("Viagra.dat")
viagraDat <- read.delim("Viagra.dat")
- **Task 2** Look at the structure of your data. How many participants do you have in your dataset? How many participants are there in each dosage group?
```{r}
str(viagraDat)
viagraDat
class(viagraDat$dose)
psych::describe(libido ~ dose, data = viagraDat)
summary_viagraDat <-  summarySE(data = viagraDat, measurevar = "libido", groupvars = "dose")
summary_viagraDat <-  summarySE(data = viagraDat, measurevar = "libido", groupvars = "dose")
ggplot(summary_viagraDat, aes(x=dose, y=libido,  color=dose)) +
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))+
geom_line()
viagraDat <- viagraDat %>%
mutate(dose = recode(dose,
"1" = "Placebo",
"2" = "Low dose",
"3" = "High dose"))
viagraDat$dose
viagraDat$dose
Since there will be some plotting involved in the operations to come, please make sure that your dose column is a factor
- **Task 4**: Check whether the dose column is a factor and adjust accordingly. Use the `class()` function
```{r}
class(viagraDat$dose)
class(viagraDat$dose)
viagraDat <- viagraDat %>%
mutate(dose = recode(dose,
"1" = "Placebo",
"2" = "Low dose",
"3" = "High dose"))
viagraDat$dose
class(viagraDat$dose)
psych::describe(libido ~ dose, data = viagraDat)
summary_viagraDat <-  summarySE(data = viagraDat, measurevar = "libido", groupvars = "dose")
ggplot(summary_viagraDat, aes(x=dose, y=libido, color=dose)) +
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))+
geom_line()
viagraDat <- viagraDat %>%
mutate(dose = recode_factor(dose,
"1" = "Placebo",
"2" = "Low dose",
"3" = "High dose"))
viagraDat$dose
viagraDat$dose
Since there will be some plotting involved in the operations to come, please make sure that your dose column is a factor
- **Task 4**: Check whether the dose column is a factor and adjust accordingly. Use the `class()` function
```{r}
class(viagraDat$dose)
psych::describe(libido ~ dose, data = viagraDat)
summary_viagraDat <-  summarySE(data = viagraDat, measurevar = "libido", groupvars = "dose")
ggplot(summary_viagraDat, aes(x=dose, y=libido, group=group, color=dose)) +
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))+
geom_line()
ggplot(summary_viagraDat, aes(x=dose, y=libido, group=group, color=dose)) +
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))+
geom_line()
ggplot(summary_viagraDat, aes(x=dose, y=libido, group=dose, color=dose)) +
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))+
geom_line()
car::leveneTest(libido ~ dose, data = viagraDat)
?aov()
viagraModel<-aov(libido~dose, data = viagraData)
viagraModel<-aov(libido~dose, data = viagraDat)
summary(viagraModel)
ggplot(summary_viagraDat, aes(x=dose, y=libido, group=1, color=dose)) +
geom_point()+
geom_errorbar(aes(ymin=libido-ci, ymax=libido+ci), width=.2,
position=position_dodge(0.05))+
geom_line()
oneway.test(libido~dose, data = viagraDat)
summary(viagraModel)
