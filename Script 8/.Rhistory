# We compute the number of rows associated with the critical trials and then we divide by the number of participants
nrow(lexical_decision_dat_recoded_filler)/32
There were 54 real word (critical) trials and 54 pseudo-word (filler) trials.
- **Generate frequency tables and plots for each categorical variable: type, frequency, length, response**
Hint: Do you remember the script on outliers? We used a function from a specific package that allowed us to generate both frequency tables and plots for variables. Make sure to add that package to the libraries list at the beginning of the script once you determine which function to choose and from which package it comes. Alternatively you can use the `::` notation
```{r}
epiDisplay::tab1(lexical_decision_dat_recoded$type)
epiDisplay::tab1(lexical_decision_dat_recoded$type)
```{r}
epiDisplay::tab1(lexical_decision_dat_recoded$freq)
epiDisplay::tab1(lexical_decision_dat_recoded$freq)
```{r}
epiDisplay::tab1(lexical_decision_dat_recoded$length)
epiDisplay::tab1(lexical_decision_dat_recoded$length)
```{r}
epiDisplay::tab1(lexical_decision_dat_recoded$response)
lexical_decision_dat <- haven::read_sav("Lexical_Decision_RTs.sav")
lexical_decision_dat
str(lexical_decision_dat)
lexical_decision_dat$type <- as.factor(lexical_decision_dat$type)
lexical_decision_dat$freq <- as.factor(lexical_decision_dat$freq)
lexical_decision_dat$length <- as.factor(lexical_decision_dat$length)
lexical_decision_dat$response <- as.factor(lexical_decision_dat$response)
# It's good practice to save the result of your recoding in a new variable in case you would like to access the original data at a later step
lexical_decision_dat_recoded <- lexical_decision_dat %>%
mutate(type = recode_factor(type,
"1" = "Real_word",
"2" = "Pseudo_word"),
freq = recode_factor(freq,
"1" = "low",
"2" = "medium" ,
"3" = "high" ,
"NA" = "Pseudo_word"),
length = recode_factor(length,
"1" = "short",
"2" = "medium" ,
"3" = "long"  ),
response = recode_factor(response,
"1" = "YES",
"2" = "NO")
)
lexical_decision_dat_recoded
length(unique(lexical_decision_dat_recoded$participant))
# Constructing a subset for the critical items
lexical_decision_dat_recoded_critical <- lexical_decision_dat_recoded %>%
filter(type == "Real_word")
# We compute the number of rows associated with the critical trials and then we divide by the number of participants
nrow(lexical_decision_dat_recoded_critical)/32
# Constructing a subset for the filler items
lexical_decision_dat_recoded_filler <- lexical_decision_dat_recoded %>%
filter(type == "Pseudo_word")
# We compute the number of rows associated with the critical trials and then we divide by the number of participants
nrow(lexical_decision_dat_recoded_filler)/32
epiDisplay::tab1(lexical_decision_dat_recoded$type)
epiDisplay::tab1(lexical_decision_dat_recoded$length)
epiDisplay::tab1(lexical_decision_dat_recoded$response)
lexical_decision_dat_recoded <- lexical_decision_dat_recoded %>%
mutate(accuracy = ifelse(type == "Real_word" & response == "YES", 1, 0))
lexical_decision_dat_recoded <- lexical_decision_dat_recoded %>%
group_by(participant) %>%
mutate(accuracy_percentage = sum(accuracy)/128)
lexical_decision_dat_recoded
lexical_decision_dat_recoded <- lexical_decision_dat_recoded %>%
group_by(participant) %>%
mutate(accuracy_percentage = sum(accuracy))
lexical_decision_dat_recoded
lexical_decision_dat_recoded <- lexical_decision_dat_recoded %>%
group_by(participant) %>%
mutate(accuracy_percentage = sum(accuracy)*100/54)
lexical_decision_dat_recoded
lexical_decision_dat_recoded <- lexical_decision_dat_recoded %>%
group_by(participant) %>%
mutate(accuracy_percentage = (sum(accuracy)/54)*100)
lexical_decision_dat_recoded
lexical_decision_dat_recoded <- lexical_decision_dat_recoded %>%
group_by(participant) %>%
mutate(accuracy_percentage = (sum(accuracy)/128)*100)
lexical_decision_dat_recoded
lexical_decision_dat_recoded <- lexical_decision_dat_recoded %>%
group_by(participant) %>%
mutate(accuracy_percentage = (sum(accuracy)/54)*100)
lexical_decision_dat_recoded
range(lexical_decision_dat_recoded$accuracy_percentage)
mean(lexical_decision_dat_recoded$accuracy_percentage)
hist(lexical_decision_dat_recoded$word_length)
hist(lexical_decision_dat_recoded$RT)
hist(lexical_decision_dat_recoded$RT)
hist(lexical_decision_dat_recoded$rt)
ggplot(data = lexical_decision_dat_recoded, aes(x = freq, y = rt, fill = freq))+
geom_boxplot() +
stat_boxplot(geom = "errorbar")+
labs(x = "Word frequency category", y = "Reaction times", fill = "Word frequency category",
title = "Reaction times as a function of word frequency")+
scale_fill_brewer(palette = "Pastel1")
# It's good practice to save the result of your recoding in a new variable in case you would like to access the original data at a later step
lexical_decision_dat_recoded <- lexical_decision_dat %>%
mutate(type = recode_factor(type,
"1" = "Real_word",
"2" = "Pseudo_word"),
freq = recode_factor(freq,
"1" = "low",
"2" = "medium" ,
"3" = "high" ,
NA = "Pseudo_word"),
# It's good practice to save the result of your recoding in a new variable in case you would like to access the original data at a later step
lexical_decision_dat_recoded <- lexical_decision_dat %>%
mutate(type = recode_factor(type,
"1" = "Real_word",
"2" = "Pseudo_word"),
freq = recode_factor(freq,
"1" = "low",
"2" = "medium" ,
"3" = "high" ,
NA = "Pseudo_word"),
# It's good practice to save the result of your recoding in a new variable in case you would like to access the original data at a later step
lexical_decision_dat_recoded <- lexical_decision_dat %>%
mutate(type = recode_factor(type,
"1" = "Real_word",
"2" = "Pseudo_word"),
freq = recode_factor(freq,
"1" = "low",
"2" = "medium" ,
"3" = "high" ,
"NA" = "Pseudo_word"),
length = recode_factor(length,
"1" = "short",
"2" = "medium" ,
"3" = "long"  ),
response = recode_factor(response,
"1" = "YES",
"2" = "NO")
)
lexical_decision_dat_recoded
# It's good practice to save the result of your recoding in a new variable in case you would like to access the original data at a later step
lexical_decision_dat_recoded <- lexical_decision_dat %>%
mutate(type = recode(type,
"1" = "Real_word",
"2" = "Pseudo_word"),
freq = recode(freq,
"1" = "low",
"2" = "medium" ,
"3" = "high" ,
"NA" = "Pseudo_word"),
length = recode(length,
"1" = "short",
"2" = "medium" ,
"3" = "long"  ),
response = recode(response,
"1" = "YES",
"2" = "NO")
)
lexical_decision_dat_recoded
# It's good practice to save the result of your recoding in a new variable in case you would like to access the original data at a later step
lexical_decision_dat_recoded <- lexical_decision_dat %>%
mutate(type = recode(type,
"1" = "Real_word",
"2" = "Pseudo_word"),
freq = recode(freq,
"1" = "low",
"2" = "medium" ,
"3" = "high" ,
NA = "Pseudo_word"),
# It's good practice to save the result of your recoding in a new variable in case you would like to access the original data at a later step
lexical_decision_dat_recoded <- lexical_decision_dat %>%
mutate(type = recode(type,
"1" = "Real_word",
"2" = "Pseudo_word"),
freq = recode(freq,
"1" = "low",
"2" = "medium" ,
"3" = "high" ,
"NA" = "Pseudo_word"),
length = recode(length,
"1" = "short",
"2" = "medium" ,
"3" = "long"  ),
response = recode(response,
"1" = "YES",
"2" = "NO")
)
lexical_decision_dat_recoded
lexical_decision_dat_critical <- lexical_decision_dat_recoded %>%
filter(type =="Real_word")
lexical_decision_dat_critical
ggplot(data = lexical_decision_dat_critical, aes(x = freq, y = rt, fill = freq))+
geom_boxplot() +
stat_boxplot(geom = "errorbar")+
labs(x = "Word frequency category", y = "Reaction times", fill = "Word frequency category",
title = "Reaction times as a function of word frequency")+
scale_fill_brewer(palette = "Pastel1")
downloadDat <- read.delim(file = "DownloadFestival.dat")
downloadDat
str(downloadDat)
downloadDat_day1 <- downloadDat %>%
select(!c(day2, day3))
downloadDat_day1 <- downloadDat %>%
select(-(day2, day3))
downloadDat_day1 <- downloadDat %>%
select(!(day2, day3))
downloadDat_day1 <- downloadDat %>%
select(-day2, day3)
downloadDat_day1 <- downloadDat %>%
select(-day2, day3)
downloadDat_day1 <- downloadDat %>%
select(!c(day1, day2))
downloadDat_day1 <- downloadDat %>%
select(-c(day1, day2))
downloadDat_day1 <- downloadDat %>%
select(ticketnumb, gender, day1)
downloadDat_day1 <- downloadDat %>%
select(ticketnumb, gender, day1)
downloadDat_day1 <- downloadDat %>%
select(ticketnumb, gender, day1)
downloadDat
downloadDat_day1 <- downloadDat %>%
select(ticketnumb, gender, day1)
downloadDat_day1 <- downloadDat %>%
select(-c("day2", "day3"))
downloadDat %>%
select(-c("day2", "day3"))
library(tidyverse)
downloadDat %>%
select(-c("day2", "day3"))
downloadDat_day1 <- downloadDat %>%
dplyr::select(-c("day2", "day3"))
downloadDat_day1
downloadDat_day1_female <- downloadDat_day1 %>%
filter(gender == "Female")
downloadDat_day1_male <- downloadDat_day1 %>%
filter(gender == "Female")
downloadDat_day1_male <- downloadDat_day1 %>%
filter(gender == "Male")
downloadDat_day1_male
# Saving the mean and the standard deviation in variables
mean_female_day1_download <- mean(downloadDat_day1_female$day1)
sd_female_day1_download <-  sd(downloadDat_day1_female$day1)
mean_female_day1_download
sd_female_day1_download
downloadDat_day1_female <- downloadDat_day1_female %>%
mutate(z_scores = ((downloadDat_day1_female$day1-mean_female_day1_download)/sd_female_day1_download))
downloadDat_day1_female
# Check whether there are any outliers in the data
downloadDat_day1_female <- downloadDat_day1_female %>%
filter(z_scores > 2)
downloadDat_day1_female
# Replace the outlier day1 value with the average day1 value observed for female festival goers
downloadDat_day1_female$day1[z_scores > 2] <- mean_female_day1_download
# Replace the outlier day1 value with the average day1 value observed for female festival goers
downloadDat_day1_female[z_scores > 2] <- mean_female_day1_download
# Replace the outlier day1 value with the average day1 value observed for female festival goers
downloadDat_day1_female[downloadDat_day1_female$z_scores > 2] <- mean_female_day1_download
downloadDat_day1_female
downloadDat_day1_female <- downloadDat_day1 %>%
filter(gender == "Female")
downloadDat_day1_female <- downloadDat_day1 %>%
filter(gender == "Female")
```{r}
downloadDat_day1_male <- downloadDat_day1 %>%
filter(gender == "Male")
# Saving the mean and the standard deviation in variables
mean_female_day1_download <- mean(downloadDat_day1_female$day1)
sd_female_day1_download <-  sd(downloadDat_day1_female$day1)
downloadDat_day1_female <- downloadDat_day1_female %>%
mutate(z_scores = ((downloadDat_day1_female$day1-mean_female_day1_download)/sd_female_day1_download))
# Check whether there are any outliers in the data
downloadDat_day1_female <- downloadDat_day1_female %>%
filter(z_scores > 2)
# Replace the outlier day1 value with the average day1 value observed for female festival goers
downloadDat_day1_female[downloadDat_day1_femalez_scores > 2] <- mean_female_day1_download
downloadDat_day1_female
# Replace the outlier day1 value with the average day1 value observed for female festival goers
downloadDat_day1_female[downloadDat_day1_female$z_scores == 16.80709]
# Replace the outlier day1 value with the average day1 value observed for female festival goers
downloadDat_day1_female[downloadDat_day1_female$z_scores == 16.80709]
downloadDat_day1_female
# Check whether there are any outliers in the data
downloadDat_day1_female <- downloadDat_day1_female %>%
filter(z_scores > 2)
downloadDat_day1_female
View(downloadDat_day1_female)
if(downloadDat_day1_female$z_scores > 2){
downloadDat_day1_female$day1 = mean_female_day1_download
}
# Replace the day1 values that are outliers with the average hygiene score observed for the subset of interest
if(downloadDat_day1_female$z_scores > 2){
downloadDat_day1_female$day1 = mean_female_day1_download
}
mean_male_day1_download <- mean(downloadDat_day1_male$day1)
sd_male_day1_download <-  sd(downloadDat_day1_male$day1)
mean_male_day1_download
sd_male_day1_download
downloadDat_day1_female <- downloadDat_day1_male %>%
mutate(z_scores = ((downloadDat_day1_male$day1-mean_male_day1_download)/sd_male_day1_download))
downloadDat_day1_male <- downloadDat_day1_male %>%
mutate(z_scores = ((downloadDat_day1_male$day1-mean_male_day1_download)/sd_male_day1_download))
downloadDat_day1_female <- downloadDat_day1 %>%
filter(gender == "Female")
downloadDat_day1_male <- downloadDat_day1 %>%
filter(gender == "Male")
# Saving the mean and the standard deviation in variables
mean_female_day1_download <- mean(downloadDat_day1_female$day1)
sd_female_day1_download <-  sd(downloadDat_day1_female$day1)
downloadDat_day1_female <- downloadDat_day1_female %>%
mutate(z_scores = ((downloadDat_day1_female$day1-mean_female_day1_download)/sd_female_day1_download))
# Check whether there are any outliers in the data
downloadDat_day1_female <- downloadDat_day1_female %>%
filter(z_scores > 2)
if(downloadDat_day1_female$z_scores > 2){
downloadDat_day1_female$day1 = mean_female_day1_download
}
downloadDat_day1_male
mean_male_day1_download <- mean(downloadDat_day1_male$day1)
sd_male_day1_download <-  sd(downloadDat_day1_male$day1)
downloadDat_day1_male <- downloadDat_day1_male %>%
mutate(z_scores = ((downloadDat_day1_male$day1-mean_male_day1_download)/sd_male_day1_download))
# Check whether there are any outliers in the data
downloadDat_day1_male <- downloadDat_day1_male %>%
filter(z_scores > 2)
downloadDat_day1_male
mean_male_day1_download
if(downloadDat_day1_male$z_scores > 2){
downloadDat_day1_male$day1 = mean_male_day1_download
}
if(downloadDat_day1_male$z_scores > 2){
downloadDat_day1_male$day1 = mean_male_day1_download
}
downloadDat_day1_male$z_scores > 2
if(downloadDat_day1_male$z_scores > 2){
downloadDat_day1_male$day1 = mean_male_day1_download
}
downloadDat_day1_male$day1
mean_male_day1_download
downloadDat_day1_male
mean_male_day1_download <- mean(downloadDat_day1_male$day1)
sd_male_day1_download <-  sd(downloadDat_day1_male$day1)
mean_male_day1_download
mean_male_day1_download <- mean(downloadDat_day1_male$day1)
sd_male_day1_download <-  sd(downloadDat_day1_male$day1)
mean_male_day1_download
downloadDat_day1_male <- downloadDat_day1_male %>%
mutate(z_scores = ((downloadDat_day1_male$day1-mean_male_day1_download)/sd_male_day1_download))
View(downloadDat_day1_male)
downloadDat_day1_male <- downloadDat_day1_male %>%
mutate(z_scores = ((downloadDat_day1_male$day1-mean_male_day1_download)/sd_male_day1_download))
downloadDat_day1_male
downloadDat_day1_male
downloadDat <- read.delim(file = "DownloadFestival.dat")
downloadDat_day1 <- downloadDat %>%
dplyr::select(-c("day2", "day3"))
downloadDat_day1_female <- downloadDat_day1 %>%
filter(gender == "Female")
downloadDat_day1_male <- downloadDat_day1 %>%
filter(gender == "Male")
mean_male_day1_download <- mean(downloadDat_day1_male$day1)
mean_male_day1_download
sd_male_day1_download <-  sd(downloadDat_day1_male$day1)
sd_male_day1_download
downloadDat_day1_male <- downloadDat_day1_male %>%
mutate(z_scores = ((downloadDat_day1_male$day1-mean_male_day1_download)/sd_male_day1_download))
downloadDat_day1_male
downloadDat_day1_female <- downloadDat_day1_female %>%
mutate(z_scores = ((downloadDat_day1_female$day1-mean_female_day1_download)/sd_female_day1_download))
# Check whether there are any outliers in the data
downloadDat_day1_female_filtered <- downloadDat_day1_female %>%
filter(z_scores > 2)
downloadDat_day1_female_filtered
{
downloadDat_day1_female$day1 = mean_female_day1_download
}
if(downloadDat_day1_female$z_scores > 2){
downloadDat_day1_female$day1 = mean_female_day1_download
}
{
downloadDat_day1_female$day1 = mean_female_day1_download
}
if(downloadDat_day1_female$z_scores > 2){
downloadDat_day1_female$day1 = mean_female_day1_download
}
for(1:nrow(downloadDat_day1_female)){
for(x in 1:nrow(downloadDat_day1_female)){
if(downloadDat_day1_female$z_scores > 2){
downloadDat_day1_female$day1 = mean_female_day1_download
}
}
ifelse(downloadDat_day1_female$z_scores > 2, downloadDat_day1_female$day1 = mean_female_day1_download, downloadDat_day1_female$day1 = downloadDat_day1_female$day1)
ifelse(downloadDat_day1_female$z_scores > 2, (downloadDat_day1_female$day1 = mean_female_day1_download), (downloadDat_day1_female$day1 = downloadDat_day1_female$day1))
ifelse(downloadDat_day1_female$z_scores > 2, (downloadDat_day1_female$day1 = mean_female_day1_download),)
ifelse(downloadDat_day1_female$z_scores > 2, (downloadDat_day1_female$day1 = mean_female_day1_download),)
ifelse(downloadDat_day1_female$z_scores > 2, (downloadDat_day1_female$day1 = mean_female_day1_download), downloadDat_day1_female$day1)
downloadDat_day1_female$day1[downloadDat_day1_female$z_scores > 2] <- mean_female_day1_download
downloadDat_day1_female
downloadDat_day1_female <- downloadDat_day1 %>%
filter(gender == "Female")
downloadDat_day1_female <- downloadDat_day1 %>%
filter(gender == "Female")
```{r}
downloadDat_day1_male <- downloadDat_day1 %>%
filter(gender == "Male")
# Saving the mean and the standard deviation in variables
mean_female_day1_download <- mean(downloadDat_day1_female$day1)
sd_female_day1_download <-  sd(downloadDat_day1_female$day1)
downloadDat_day1_female <- downloadDat_day1_female %>%
mutate(z_scores = ((downloadDat_day1_female$day1-mean_female_day1_download)/sd_female_day1_download))
# Check whether there are any outliers in the data
downloadDat_day1_female_filtered <- downloadDat_day1_female %>%
filter(z_scores > 2)
downloadDat_day1_female_filtered
downloadDat_day1_female
m
downloadDat_day1_female$day1[downloadDat_day1_female$z_scores > 2] <- mean_female_day1_download
downloadDat_day1_female
mean_female_day1_download
downloadDat_day1_female
downloadDat_day1_male
mean_male_day1_download <- mean(downloadDat_day1_male$day1)
sd_male_day1_download <-  sd(downloadDat_day1_male$day1)
downloadDat_day1_male <- downloadDat_day1_male %>%
mutate(z_scores = ((downloadDat_day1_male$day1-mean_male_day1_download)/sd_male_day1_download))
# Check whether there are any outliers in the data
downloadDat_day1_male <- downloadDat_day1_male %>%
filter(z_scores > 2)
downloadDat_day1_male <- downloadDat_day1 %>%
filter(gender == "Male")
downloadDat_day1_male
mean_male_day1_download <- mean(downloadDat_day1_male$day1)
sd_male_day1_download <-  sd(downloadDat_day1_male$day1)
downloadDat_day1_male <- downloadDat_day1_male %>%
mutate(z_scores = ((downloadDat_day1_male$day1-mean_male_day1_download)/sd_male_day1_download))
# Check whether there are any outliers in the data
downloadDat_day1_male_filtered <- downloadDat_day1_male %>%
filter(z_scores > 2)
downloadDat_day1_male_filtered
downloadDat_day1_male
downloadDat_day1_male$day1[downloadDat_day1_male$z_scores > 2] <- mean_female_day1_download
downloadDat_day1_male
downloadDat_day1_male$day1[downloadDat_day1_male$z_scores > 2] <- mean_male_day1_download
mean_male_day1_download
mean_male_day1_download
mean_female_day1_download
downloadDat_day1_male$day1[downloadDat_day1_male$z_scores > 2] <- mean_male_day1_download
nortest::lillie.test(downloadDat_day1_female$day1)
nortest::lillie.test(downloadDat_day1_male$day1)
downloadDat_day1_female$day1[downloadDat_day1_female$z_scores > 2] <- mean_female_day1_download
downloadDat_day1_female
View(downloadDat_day1_female)
downloadDat_day1_female$day1[downloadDat_day1_female$z_scores > 2] <- mean_female_day1_download
nortest::lillie.test(downloadDat_day1_female$day1)
nortest::lillie.test(downloadDat_day1_female)
nortest::lillie.test(downloadDat_day1_female$day1)
downloadDat <- read_sav(file = "DownloadFestival.sav")
downloadDat <- read_sav("DownloadFestival.sav")
downloadDat <- read_sav("DownloadFestival_4stud.sav")
downloadDat
View(downloadDat_day1)
View(downloadDat)
View(downloadDat_day1)
str(downloadDat)
downloadDat_day1 <- downloadDat %>%
dplyr::select(-c("day2", "day3"))
downloadDat_day1
downloadDat_day1_female <- downloadDat_day1 %>%
filter(gender == "0")
downloadDat_day1_female <- downloadDat_day1 %>%
filter(gender == "1")
downloadDat_day1
downloadDat_day1_female <- downloadDat_day1 %>%
filter(gender == 1)
downloadDat_day1_male <- downloadDat_day1 %>%
filter(gender == 0)
# Saving the mean and the standard deviation in variables
mean_female_day1_download <- mean(downloadDat_day1_female$day1)
sd_female_day1_download <-  sd(downloadDat_day1_female$day1)
mean_female_day1_download
sd_female_day1_download
downloadDat_day1_female <- downloadDat_day1_female %>%
mutate(z_scores = ((downloadDat_day1_female$day1-mean_female_day1_download)/sd_female_day1_download))
# Check whether there are any outliers in the data
downloadDat_day1_female_filtered <- downloadDat_day1_female %>%
filter(z_scores > 2)
downloadDat_day1_female$day1[downloadDat_day1_female$z_scores > 2] <- mean_female_day1_download
downloadDat_day1_female
downloadDat_day1_male
mean_male_day1_download <- mean(downloadDat_day1_male$day1)
sd_male_day1_download <-  sd(downloadDat_day1_male$day1)
downloadDat_day1_male <- downloadDat_day1_male %>%
mutate(z_scores = ((downloadDat_day1_male$day1-mean_male_day1_download)/sd_male_day1_download))
# Check whether there are any outliers in the data
downloadDat_day1_male_filtered <- downloadDat_day1_male %>%
filter(z_scores > 2)
downloadDat_day1_male$day1[downloadDat_day1_male$z_scores > 2] <- mean_male_day1_download
nortest::lillie.test(downloadDat_day1_female$day1)
nortest::lillie.test(downloadDat_day1_male$day1)
car::leveneTest(day1 ~ gender, data = downloadDat_day1)
downloadDat_day1_new <- rbind(downloadDat_day1_female, downloadDat_day1_male)
downloadDat_day1_new
as.factor(downloadDat_day1_new$gender)
car::leveneTest(day1 ~ gender, data = downloadDat_day1_new)
car::leveneTest(gender ~ day1, data = downloadDat_day1_new)
downloadDat_day1_new
levene.test(gender ~ day1, data = downloadDat_day1_new)
levene_test(gender ~ day1, data = downloadDat_day1_new)
rstatix::levene_test(gender ~ day1, data = downloadDat_day1_new)
rstatix::levene_test(day1 ~ gender, data = downloadDat_day1_new)
downloadDat_day1_new$gender <- as.factor(downloadDat_day1_new$gender)
rstatix::levene_test(day1 ~ gender, data = downloadDat_day1_new)
car::leveneTest(day1 ~ gender, data = downloadDat_day1_new)
t.test(day1 ~ gender, paired = TRUE)
t.test(data = downloadDat_day1_new,day1 ~ gender, paired = TRUE)
t.test(day1 ~ gender, paired = TRUE, downloadDat_day1_new)
t.test(day1 ~ gender, downloadDat_day1_new)
t.test(day1 ~ gender, downloadDat_day1_new, paired = TRUE)
t.test(day1 ~ gender, downloadDat_day1_new, paired = FALSE)
