old
young <- data %>%
filter(data$DOB > 1970)
young
mean_income_young <- mean(young$Income)
mean_income_old <- mean(old$Income)
median_income_young <- median(young$Income)
median_income_old <- median(old$Income)
mean_income_young == mean_income_old
median_income_old < median_income_young
mean_income_old >= median_income_old
find_mode <- function(x) {
u <- unique(x) # finds unique instances of each Income value
tab <- tabulate(match(x, u)) # computes frequencies for each unique value in the actual column
u[tab == max(tab)] # indexing the vector with unique instances of each Income value depending on their frequency
}
mode_income <- find_mode(data$Income)
mode_income
View(chickflick_outliers)
typeof(chickflick_outliers$gender)
typeof(chickflick_outliers$film)
chickflick_outliers <- chickflick_outliers %>%
mutate(gender = as.factor(gender),
film = as.factor(film))
str(chickflick_outliers)
ggplot(data = chickflick_outliers, aes(x = film, y = arousal, fill = gender))+
geom_boxplot() +
stat_boxplot(geom = "errorbar")+
labs(x = "Film", y = "Average physiological arousal", fill = "Gender",
title = "Average physhiological arousal as a function of gender and watched film")+
scale_fill_brewer(palette = "Pastel1")
chickflick_outliers$z_scores <- (chickflick_outliers$arousal - mean_chickflick) / sd_chickflick
chickflick_outliers$z_scores <- (chickflick_outliers$arousal - mean_chickflick) / sd_chickflick
chickflick_outliers
chickflick_outliers <- chickflick_outliers %>%
select(!z_scores)
chickflick_outliers
chickflick_outliers <- chickflick_outliers %>%
mutate(z_score = (chickflick_outliers$arousal - mean_chickflick)/sd_chickflick)
chickflick_outliers
# Let's recode the z-scores
chickflick_outliers <- chickflick_outliers %>%
mutate(z_scores = case_when(
z_scores > 3.29 ~ 4,
z_scores > 2.58 ~ 3,
z_scores > 1.96 ~ 2,
z_scores < 2 ~ 1
))
chickflick_outliers$z_scores <- (chickflick_outliers$arousal - mean_chickflick) / sd_chickflick)
chickflick_outliers$z_scores <- (chickflick_outliers$arousal - mean_chickflick) / sd_chickflick))
chickflick_outliers <- chickflick_outliers %>%
mutate(z_score = (chickflick_outliers$arousal - mean_chickflick)/sd_chickflick)
chickflick_outliers
chickflick_outliers <- chickflick_outliers %>%
mutate(z_scores = (chickflick_outliers$arousal - mean_chickflick)/sd_chickflick)
# Let's recode the z-scores
chickflick_outliers <- chickflick_outliers %>%
mutate(z_scores = case_when(
z_scores > 3.29 ~ 4,
z_scores > 2.58 ~ 3,
z_scores > 1.96 ~ 2,
z_scores < 2 ~ 1
))
# Check the result
chickflick_outliers
chickflick_outliers$z_scores <- (chickflick_outliers$arousal - mean_chickflick) / sd_chickflick
# Let's recode the z-scores
chickflick_outliers <- chickflick_outliers %>%
mutate(z_scores = case_when(
z_scores > 3.29 ~ 4,
z_scores > 2.58 ~ 3,
z_scores > 1.96 ~ 2,
z_scores < 2 ~ 1
))
# Check the result
chickflick_outliers
#suppress the warnings and other messages from showing in the knitted file.
knitr::opts_chunk$set(
fig.width  = 8,
fig.height = 5,
echo       = TRUE,
warning    = FALSE,
message    = FALSE,
cache      = TRUE
)
reading_within_tall <- reading_within %>%
pivot_longer(cols = 2:3, names_to = "parallelism", values_to = "reading_times", values_drop_na = TRUE)
setwd("~/Desktop/Stats planning/Script 3")
reading_within <- read_sav("reading.sav")
reading_within_tall <- reading_within %>%
pivot_longer(cols = 2:3, names_to = "parallelism", values_to = "reading_times", values_drop_na = TRUE)
# Check the result
reading_within_tall
# Make sure that parallelism is a factor
reading_within_tall$parallelism <- as.factor(reading_within_tall$parallelism)
reading_within_tall
# Make sure that the subject column is a factor
reading_within_tall$subj <- as.factor(reading_within_tall$subj)
# Compute an summary statistics adjusted to within-participants design
reading_within_summary_adjusted <-summarySEwithin(reading_within_tall, measurevar = "reading_times", withinvars = "parallelism", idvar = "subj", conf.interval=.95)
# Check the result
reading_within_summary_adjusted
# Compute an summary statistics adjusted to within-participants design
reading_within_summary_adjusted <-summarySEwithin(reading_within_tall, measurevar = "reading_times", withinvars = "parallelism",  conf.interval=.95)
# Check the result
reading_within_summary_adjusted
# Compute an summary statistics adjusted to within-participants design
reading_within_summary_adjusted <-summarySEwithin(reading_within_tall, measurevar = "reading_times", withinvars = "parallelism", idvar = "subj", conf.interval=.95)
# Check the result
reading_within_summary_adjusted
#suppress the warnings and other messages from showing in the knitted file.
knitr::opts_chunk$set(
fig.width  = 8,
fig.height = 5,
echo       = TRUE,
warning    = FALSE,
message    = FALSE,
cache      = TRUE
)
options(repos = list(CRAN="http://cran.rstudio.com/"))
depressionDrugs <- read.delim("Drug.dat")
str(depressionDrugs)
drugsData <- read_sav("Drugs.sav")
setwd("~/Desktop/Stats planning/Script 7")
drugsData <- read_sav("Drugs.sav")
View(drugsData)
View(depressionDrugs)
depressionDrugs
depressionDrugs
# Building subsets for the Sunday and Wednesday data
sundayData <- despressionDrugs %>%
select(drug, sundayBDI)
depressionDrugs <- read.delim("Drug.dat")
# Building subsets for the Sunday and Wednesday data
sundayData <- despressionDrugs %>%
select(drug, sundayBDI)
#suppress the warnings and other messages from showing in the knitted file.
knitr::opts_chunk$set(
fig.width  = 8,
fig.height = 5,
echo       = TRUE,
warning    = FALSE,
message    = FALSE,
cache      = TRUE
)
options(repos = list(CRAN="http://cran.rstudio.com/"))
depressionDrugs <- read.delim("Drug.dat")
depressionDrugs
# Building subsets for the Sunday and Wednesday data
sundayData <- despressionDrugs %>%
select(drug, sundayBDI)
library(tidyverse)
# Building subsets for the Sunday and Wednesday data
sundayData <- despressionDrugs %>%
select(drug, sundayBDI)
# Building subsets for the Sunday and Wednesday data
sundayData <- depressionDrugs %>%
select(drug, sundayBDI)
sundayData
wednesdayData <- depressionDrugs %>%
select(drug, wedsBDI)
wednesdayData
summary_sunday <- summarySE(data = sundayData, measurevar = "sundayBDI", groupvars = "drug")
library(Rmisc)
summary_sunday <- summarySE(data = sundayData, measurevar = "sundayBDI", groupvars = "drug")
# Check result
summary_sunday
summary_sunday <- psych::describe(data = sundayData)
summary_sunday <- psych::describe(data = sundayData)
summary_sunday <- psych::describe(x = sundayData)
# Check result
summary_sunday
psych::describe()
summary_sunday <- psych::describe(sundayData$sundayBDI)
# Check result
summary_sunday
#Computing descriptive statistics for the sunday subset
summary_wednesday <- psych::describe(wednesdayData$wedsBDI)
# Check result
summary_wednesday
hist(sundayData$sundayBDI)
hist(wednesdayData$wedsBDI)
qqnorm(wednesdayData$wedsBDI)
qqline(wednesdayData$wedsBDI)
qqnorm(sundayData$sundayBDI)
qqline(sundayData$sundayBDI)
shapiro.test(sundayData$sundayBDI)
shapiro.test(wednesdayData$wedsBDI)
#Computing descriptive statistics for the sunday subset
summary_sunday <- psych::describe(sundayData$sundayBDI ~ drug)
#Computing descriptive statistics for the sunday subset
summary_sunday <- psych::describe(sundayData$sundayBDI ~ drug)
#Computing descriptive statistics for the sunday subset
summary_sunday <- psych::describeBy(sundayData$sundayBDI ~ drug)
#Computing descriptive statistics for the sunday subset
summary_sunday <- psych::describe(sundayData$sundayBDI ~ drug)
#Computing descriptive statistics for the sunday subset
summary_sunday <- psych::describe(sundayBDI ~ drug, data = sundayData)
# Check result
summary_sunday
summary_sunday
summary_sunday
#Computing descriptive statistics for the sunday subset
summary_wednesday <- psych::describe(wedsBDI ~ drug, data = wednesdayData)
# Check result
summary_wednesday
shapiro.test(sundayData$sundayBDI ~ drug)
shapiro.test(sundayData$sundayBDI ~ drug)
sundayData %>%
group_by(drug) %>%
shapiro.test(sundayBDI)
sundayData %>%
group_by(drug) %>%
shapiro.test(sundayBDI)
sundayData %>%
group_by(drug) %>%
shapiro.test(sundayBDI)
sundayData %>%
group_by(drug) %>%
shapiro_test(sundayBDI)
sundayData %>%
group_by(drug) %>%
rstatix::shapiro_test(sundayBDI)
install.packages("rstatix")
install.packages("rstatix")
```
library(rstatix)
sundayData %>%
group_by(drug) %>%
shapiro_test(sundayBDI)
wednesdayData %>%
group_by(drug) %>%
shapiro_test(wesBDI)
wednesdayData %>%
group_by(drug) %>%
shapiro_test(wesBDI)
wednesdayData %>%
group_by(drug) %>%
shapiro_test(wedsBDI)
sundayData
leveneTest(sundayBDI ~ drug, data = sundayData)
library(car)
leveneTest(sundayBDI ~ drug, data = sundayData)
leveneTest(wedsBMI ~ drug, data = wednesdayData)
wednesdayData
leveneTest(wedsBDI ~ drug, data = wednesdayData)
wilcox.test
wilcox_test()
wilcox_test(data = depressionDrugs, sundayBDI ~ drug)
wilcox_test(data = depressionDrugs, wedsBDI ~ drug)
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p.value/2)
r<- z/ sqrt(N)
cat(wilcoxModel$data.name, "Effect Size, r = ", r)
}
sunday_wilcox <- wilcox_test(data = depressionDrugs, sundayBDI ~ drug)
rFromWilcox(sunday_wilcox)
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p.value/2)
r<- z/ sqrt(N)
cat(wilcoxModel$data.name, "Effect Size, r = ", r)
}
rFromWilcox(sunday_wilcox)
rFromWilcox(sunday_wilcox, 20)
rFromWilcox(sunday_wilcox, 20)
rFromWilcox(sunday_wilcox, 20)
?qnorm?
?
n
?qnorm
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p.value/2)
r<- z/ sqrt(N)
}
rFromWilcox(sunday_wilcox, 20)
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p.value/2)
r<- z/ sqrt(N)
print(z)
print(r)
}
rFromWilcox(sunday_wilcox, 20)
sunday_wilcox
sunday_wilcox$p
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p/2)
r<- z/ sqrt(N)
print(z)
print(r)
}
rFromWilcox(sunday_wilcox, 20)
wednesday_wilcox <- wilcox_test(data = depressionDrugs, wedsBDI ~ drug)
rFromWilcox(wednesday_wilcox, 20)
rFromWilcox(wednesday_wilcox, 20)
rFromWilcox(sunday_wilcox, 20)
}
cat(wilcoxModel$data.name, "Effect Size, r = ", r)
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p/2)
r<- z/ sqrt(N)
cat(wilcoxModel$data.name, "Effect Size, r = ", r)
}
rFromWilcox(sunday_wilcox, 20)
rFromWilcox(wednesday_wilcox, 20)
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p/2)
r<- z/ sqrt(N)
cat("z-score based on the test statistic, z = ", z, "Effect Size, r = ", r)
}
rFromWilcox(sunday_wilcox, 20)
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p/2)
r<- z/ sqrt(N)
cat("z-score based on the test statistic, z = ", z, ". Effect Size, r = ", r)
}
rFromWilcox(sunday_wilcox, 20)
rFromWilcox(wednesday_wilcox, 20)
wednesday_wilcox
cat(wilcoxModel$.y., "z-score based on the test statistic, z = ", z, ". Effect Size, r = ", r)
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p/2)
r<- z/ sqrt(N)
cat(wilcoxModel$.y., "z-score based on the test statistic, z = ", z, ". Effect Size, r = ", r)
}
rFromWilcox(sunday_wilcox, 20)
rFromWilcox(wednesday_wilcox, 20)
cat(wilcoxModel, "z-score based on the test statistic, z = ", z, ". Effect Size, r = ", r)
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p/2)
r<- z/ sqrt(N)
cat(wilcoxModel, "z-score based on the test statistic, z = ", z, ". Effect Size, r = ", r)
}
rFromWilcox(sunday_wilcox, 20)
sunday_wilcox$.y.
sunday_wilcox$name
sunday_wilcox$statistic
ecstasyGroup <- depressionDrugs %>%
filter(drug == "Ecstasy")
ecstasyGroup <- depressionDrugs %>%
filter(drug == "Ecstasy") %>%
mutate(difference = wedsBDI - sundayBDI)
ecstasyGroup
alcoholGroup <- depressionDrugs %>%
filter(drug == "Alcohol") %>%
mutate(difference = wedsBDI - sundayBDI)
alcoholGroup
alcohol_summary <- psych::describe(sundayBDI, wedsBDI, data = alcoholGroup)
alcohol_summary <- psych::describe(sundayBDI, data = alcoholGroup)
alcohol_summary <- psych::describe(alcoholGroup)
alcohol_summary
ecstasy_summary <- psych::describe(ecstasyGroup)
ecstasy_summary
shapiro_test(ecstasyGroup)
shapiro_test(ecstasyGroup$difference)
shapiro_test(alcoholGroup$difference)
shapiro.test(ecstasyGroup$difference)
alcoholTest<-wilcox.test(alcoholData$wedsBDI, alcoholData$sundayBDI,  paired = TRUE)
alcoholTest<-wilcox.test(alcoholGroup$wedsBDI, alcoholGroup$sundayBDI, paired = TRUE)
alcoholTest
ecstasyTest<-wilcox.test(ecstasyGroup$wedsBDI, ecstasyGroup$sundayBDI, paired = TRUE)
ecstasyTest
rFromWilcox(alcoholTest)
rFromWilcox(alcoholTest, 20)
rFromWilcox(alcoholTest, 10)
rFromWilcox(alcoholTest, 10)
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p/2)
r<- z/ sqrt(N)
cat("z-score based on the test statistic, z = ", z, ". Effect Size, r = ", r)
}
rFromWilcox(sunday_wilcox, 20)
rFromWilcox(alcoholTest, 10)
rFromWilcox(alcoholTest, 10)
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p.value/2)
r<- z/ sqrt(N)
cat("Effect Size, r = ", r)
}
rFromWilcox(sunday_wilcox, 20)
rFromWilcox(sunday_wilcox, 20)
rFromWilcox(sunday_wilcox, 20)
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p/2)
r<- z/ sqrt(N)
cat("z-score based on the test statistic, z = ", z, ". Effect Size, r = ", r)
}
rFromWilcox(sunday_wilcox, 20)
rFromWilcox(wednesday_wilcox, 20)
alcoholTest<-wilcox.test(alcoholGroup$wedsBDI, alcoholGroup$sundayBDI, paired = TRUE)
alcoholTest
alcoholTest
alcoholTest$p.value
alcoholTest<-wilcox_test(alcoholGroup$wedsBDI, alcoholGroup$sundayBDI, paired = TRUE)
wednesday_wilcox <- wilcox.test(data = depressionDrugs, wedsBDI ~ drug)
wednesday_wilcox
sunday_wilcox <- wilcox.test(data = depressionDrugs, sundayBDI ~ drug)
rFromWilcox<-function(wilcoxModel, N){
z<- qnorm(wilcoxModel$p.value/2)
r<- z/ sqrt(N)
cat("z-score based on the test statistic, z = ", z, ". Effect Size, r = ", r)
}
rFromWilcox(sunday_wilcox, 20)
alcoholTest<-wilcox.test(alcoholGroup$wedsBDI, alcoholGroup$sundayBDI, paired = TRUE)
alcoholTest
ecstasyTest<-wilcox.test(ecstasyGroup$wedsBDI, ecstasyGroup$sundayBDI, paired = TRUE)
ecstasyTest
rFromWilcox(alcoholTest, 10)
rFromWilcox(ecstasyTest, 10)
#suppress the warnings and other messages from showing in the knitted file.
knitr::opts_chunk$set(
fig.width  = 8,
fig.height = 5,
echo       = TRUE,
warning    = FALSE,
message    = FALSE,
cache      = TRUE
)
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(foreign)
library(Hmisc)
library(reshape)
library(ggplot2)
library(plyr)
library(tidyverse)
library(Rmisc)
# Creating a character vector `metallica`, containing character values representing the band members
metallica<-c("lars", "james", "Jason", "Kirk")
# Let's take a look at the vector contents
metallica
metallica[3] # Kirk
metallica[3] # Jason
metallica[1]
metallica[1] <- "lars - drummer"
metallica[1]
buch <- 3
buch
buch <- 2
setwd("~/Desktop/Stats planning/Script 1")
buch <- 2
buch <- 2
metallica <- ("lars", "kirs")
metallica <- c("lars", "kirs")
Names<-c("Lars", "James", "Kirk", "Rob")
Ages<-c(59, 59, 60, 58)
Ages<-c(59, 59, 60, 58)
# Creating the data frame
metallica_df <- data.frame(Names, Ages)
# The dataframe you have created has a 4 x 2 dimension. There are 4 rows and 2 columns.
metallica_df
metallica_df$Names
metallica_df$new_names <- c("a", "b", "c")
metallica_df$new_names <- c("a", "b", "c", "d")
metallica_df
metallica_df %>%
select(Names, Ages)
metallica_new<- metallica_df %>%
select(Names, Ages)
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(haven) # for loading .sav datasets (or other SPSS datasets)
library(dplyr) # great for summary statistics, offers all necessary functions for measures of central tendency
library(lubridate)
library(epiDisplay)
```
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(haven) # for loading .sav datasets (or other SPSS datasets)
library(dplyr) # great for summary statistics, offers all necessary functions for measures of central tendency
library(lubridate)
library(epiDisplay)
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(haven) # for loading .sav datasets (or other SPSS datasets)
library(dplyr) # great for summary statistics, offers all necessary functions for measures of central tendency
library(lubridate)
library(epiDisplay)
```
#install.packages("epiDisplay") # for frequency tables; uncomment if not previously installed
library(tidyverse)
library(ggplot2)
library(Rmisc)
library(haven) # for loading .sav datasets (or other SPSS datasets)
library(dplyr) # great for summary statistics, offers all necessary functions for measures of central tendency
library(lubridate)
library(epiDisplay)
setwd("/Users/anamariaplesca/Desktop/Stats planning/Script 2/Script_Week2.Rmd")
setwd("/Users/anamariaplesca/Desktop/Stats planning/Script 2")
getwd()
chickflick_outliers <- read_sav("ChickFlick_outliers.sav")
chickflick_simplified <- read_sav("ChickFlick_simple.sav")
# Reading in data you are already familiar with. This data is in comma separated value format. We'll use the read_csv() function
data <- read_csv("Data with which to play.csv")
data
str(data)
data
mean_income <- mean(data$Income)
# Using the `$` operator to indicate that we need the column `Income` from our dataframe `data`. Once you type the dollar operator a list of suggestion will pop-up. Use this opportunity. If you click away press on the TAB key.
income <- c(100, 200, 300, 400)
mean(income)
data %>%
filter(Friends > 2)
# Filtering
old <- data %>% # Take the `data` dataset AND
filter(data$DOB <= 1970) # filter the dataset such that it includes only the people born before and including 1970
# Take a look at the result
old
young <- data %>%
filter(data$DOB > 1970)
young
